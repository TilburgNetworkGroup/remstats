// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/remstats.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_dyad
int find_dyad(int i, int j, int c, int N, bool directed);
static SEXP _remstats_find_dyad_try(SEXP iSEXP, SEXP jSEXP, SEXP cSEXP, SEXP NSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(find_dyad(i, j, c, N, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_find_dyad(SEXP iSEXP, SEXP jSEXP, SEXP cSEXP, SEXP NSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_find_dyad_try(iSEXP, jSEXP, cSEXP, NSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// standardize
arma::mat standardize(arma::mat stat);
static SEXP _remstats_standardize_try(SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize(stat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_standardize(SEXP statSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_standardize_try(statSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_adjmat
arma::mat compute_adjmat(const arma::mat& edgelist, int N, int D, bool directed, int memory, double memory_value, int start, int stop);
static SEXP _remstats_compute_adjmat_try(SEXP edgelistSEXP, SEXP NSEXP, SEXP DSEXP, SEXP directedSEXP, SEXP memorySEXP, SEXP memory_valueSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< int >::type memory(memorySEXP);
    Rcpp::traits::input_parameter< double >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_adjmat(edgelist, N, D, directed, memory, memory_value, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_compute_adjmat(SEXP edgelistSEXP, SEXP NSEXP, SEXP DSEXP, SEXP directedSEXP, SEXP memorySEXP, SEXP memory_valueSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_compute_adjmat_try(edgelistSEXP, NSEXP, DSEXP, directedSEXP, memorySEXP, memory_valueSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// actorStat_tie
arma::mat actorStat_tie(int type, const arma::mat& covariates, const arma::mat& edgelist, const arma::vec& actors, const arma::vec& types, int D, int start, int stop);
static SEXP _remstats_actorStat_tie_try(SEXP typeSEXP, SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP DSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(actorStat_tie(type, covariates, edgelist, actors, types, D, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_actorStat_tie(SEXP typeSEXP, SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP DSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_actorStat_tie_try(typeSEXP, covariatesSEXP, edgelistSEXP, actorsSEXP, typesSEXP, DSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dyadStat_tie
arma::mat dyadStat_tie(int type, const arma::mat& covariates, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop);
static SEXP _remstats_dyadStat_tie_try(SEXP typeSEXP, SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(dyadStat_tie(type, covariates, edgelist, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_dyadStat_tie(SEXP typeSEXP, SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_dyadStat_tie_try(typeSEXP, covariatesSEXP, edgelistSEXP, risksetSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inertia_tie
arma::mat inertia_tie(const arma::mat& edgelist, const arma::mat& adjmat, const arma::mat& riskset, int N, bool directed, const arma::vec& types, int start, int stop, bool consider_type);
static SEXP _remstats_inertia_tie_try(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP directedSEXP, SEXP typesSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(inertia_tie(edgelist, adjmat, riskset, N, directed, types, start, stop, consider_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_inertia_tie(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP directedSEXP, SEXP typesSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_inertia_tie_try(edgelistSEXP, adjmatSEXP, risksetSEXP, NSEXP, directedSEXP, typesSEXP, startSEXP, stopSEXP, consider_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reciprocity_tie
arma::mat reciprocity_tie(const arma::mat& edgelist, const arma::mat& adjmat, const arma::mat& riskset, int N, const arma::vec& types, int start, int stop, bool consider_type);
static SEXP _remstats_reciprocity_tie_try(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP typesSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(reciprocity_tie(edgelist, adjmat, riskset, N, types, start, stop, consider_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_reciprocity_tie(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP typesSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_reciprocity_tie_try(edgelistSEXP, adjmatSEXP, risksetSEXP, NSEXP, typesSEXP, startSEXP, stopSEXP, consider_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// degree_tie
arma::mat degree_tie(int type, const arma::mat& edgelist, const arma::mat& adjmat, const arma::vec& actors, const arma::vec& types, int start, int stop, bool consider_type);
static SEXP _remstats_degree_tie_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(degree_tie(type, edgelist, adjmat, actors, types, start, stop, consider_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_degree_tie(SEXP typeSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_degree_tie_try(typeSEXP, edgelistSEXP, adjmatSEXP, actorsSEXP, typesSEXP, startSEXP, stopSEXP, consider_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// triad_tie
arma::mat triad_tie(int type, const arma::mat& edgelist, const arma::vec& actors, const arma::vec& types, const arma::mat& adjmat, const arma::mat& riskset, int start, int stop, bool consider_type);
static SEXP _remstats_triad_tie_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(triad_tie(type, edgelist, actors, types, adjmat, riskset, start, stop, consider_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_triad_tie(SEXP typeSEXP, SEXP edgelistSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_triad_tie_try(typeSEXP, edgelistSEXP, actorsSEXP, typesSEXP, adjmatSEXP, risksetSEXP, startSEXP, stopSEXP, consider_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pshift_tie
arma::mat pshift_tie(int type, const arma::mat& edgelist, const arma::mat& riskset, int N, int C, int start, int stop, bool consider_type);
static SEXP _remstats_pshift_tie_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP CSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pshift_tie(type, edgelist, riskset, N, C, start, stop, consider_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_pshift_tie(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP CSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_pshift_tie_try(typeSEXP, edgelistSEXP, risksetSEXP, NSEXP, CSEXP, startSEXP, stopSEXP, consider_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rrank_tie
arma::mat rrank_tie(int type, const arma::mat& edgelist, const arma::mat& riskset, int N, int C, int start, int stop, bool consider_type);
static SEXP _remstats_rrank_tie_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP CSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rrank_tie(type, edgelist, riskset, N, C, start, stop, consider_type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_rrank_tie(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP CSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_rrank_tie_try(typeSEXP, edgelistSEXP, risksetSEXP, NSEXP, CSEXP, startSEXP, stopSEXP, consider_typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// recency_tie
arma::mat recency_tie(int type, const arma::mat& edgelist, const arma::mat& riskset, int N, int C, int start, int stop, bool consider_type, bool directed);
static SEXP _remstats_recency_tie_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP CSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_type(consider_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(recency_tie(type, edgelist, riskset, N, C, start, stop, consider_type, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_recency_tie(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP CSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP consider_typeSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_recency_tie_try(typeSEXP, edgelistSEXP, risksetSEXP, NSEXP, CSEXP, startSEXP, stopSEXP, consider_typeSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tie_tie
arma::mat tie_tie(const arma::mat& covariates, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop);
static SEXP _remstats_tie_tie_try(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(tie_tie(covariates, edgelist, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_tie_tie(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_tie_tie_try(covariatesSEXP, edgelistSEXP, risksetSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// event_tie
arma::mat event_tie(const arma::mat& covariates, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop);
static SEXP _remstats_event_tie_try(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(event_tie(covariates, edgelist, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_event_tie(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_event_tie_try(covariatesSEXP, edgelistSEXP, risksetSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// FEtype_tie
arma::mat FEtype_tie(const arma::mat& covariates, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop);
static SEXP _remstats_FEtype_tie_try(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(FEtype_tie(covariates, edgelist, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_FEtype_tie(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_FEtype_tie_try(covariatesSEXP, edgelistSEXP, risksetSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_stats_tie
arma::cube compute_stats_tie(const arma::vec& effects, const arma::mat& edgelist, const arma::mat& adjmat, const arma::vec& actors, const arma::vec& types, const arma::mat& riskset, const arma::vec& scaling, const Rcpp::List& covariates, const Rcpp::List& interactions, int start, int stop, bool directed);
static SEXP _remstats_compute_stats_tie_try(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP risksetSEXP, SEXP scalingSEXP, SEXP covariatesSEXP, SEXP interactionsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type effects(effectsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_stats_tie(effects, edgelist, adjmat, actors, types, riskset, scaling, covariates, interactions, start, stop, directed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_compute_stats_tie(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP typesSEXP, SEXP risksetSEXP, SEXP scalingSEXP, SEXP covariatesSEXP, SEXP interactionsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP directedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_compute_stats_tie_try(effectsSEXP, edgelistSEXP, adjmatSEXP, actorsSEXP, typesSEXP, risksetSEXP, scalingSEXP, covariatesSEXP, interactionsSEXP, startSEXP, stopSEXP, directedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// actorStat_rc
arma::mat actorStat_rc(const arma::mat& covariates, const arma::mat& edgelist, const arma::mat& riskset, const arma::vec& actors, int start, int stop, int scaling);
static SEXP _remstats_actorStat_rc_try(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< int >::type scaling(scalingSEXP);
    rcpp_result_gen = Rcpp::wrap(actorStat_rc(covariates, edgelist, riskset, actors, start, stop, scaling));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_actorStat_rc(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_actorStat_rc_try(covariatesSEXP, edgelistSEXP, risksetSEXP, actorsSEXP, startSEXP, stopSEXP, scalingSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// degree_rc
arma::mat degree_rc(int type, const arma::mat& riskset, const arma::vec& actors, const arma::mat& adjmat);
static SEXP _remstats_degree_rc_try(SEXP typeSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP adjmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    rcpp_result_gen = Rcpp::wrap(degree_rc(type, riskset, actors, adjmat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_degree_rc(SEXP typeSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP adjmatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_degree_rc_try(typeSEXP, risksetSEXP, actorsSEXP, adjmatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// recency_rc
arma::mat recency_rc(int type, const arma::mat& edgelist, const arma::mat& riskset, int N, int start, int stop);
static SEXP _remstats_recency_rc_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(recency_rc(type, edgelist, riskset, N, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_recency_rc(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP NSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_recency_rc_try(typeSEXP, edgelistSEXP, risksetSEXP, NSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dyadStat_choice
arma::mat dyadStat_choice(int type, const arma::mat& covariates, const arma::mat& edgelist, const arma::mat& riskset, const arma::vec& actors, int start, int stop);
static SEXP _remstats_dyadStat_choice_try(SEXP typeSEXP, SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(dyadStat_choice(type, covariates, edgelist, riskset, actors, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_dyadStat_choice(SEXP typeSEXP, SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_dyadStat_choice_try(typeSEXP, covariatesSEXP, edgelistSEXP, risksetSEXP, actorsSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tie_choice
arma::mat tie_choice(const arma::mat& covariates, const arma::mat& edgelist, const arma::vec& actors, const arma::mat& riskset, int start, int stop);
static SEXP _remstats_tie_choice_try(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP actorsSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(tie_choice(covariates, edgelist, actors, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_tie_choice(SEXP covariatesSEXP, SEXP edgelistSEXP, SEXP actorsSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_tie_choice_try(covariatesSEXP, edgelistSEXP, actorsSEXP, risksetSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// inertia_choice
arma::mat inertia_choice(const arma::mat& edgelist, const arma::mat& adjmat, const arma::mat& riskset, const arma::vec& actors, int start, int stop, int scaling);
static SEXP _remstats_inertia_choice_try(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< int >::type scaling(scalingSEXP);
    rcpp_result_gen = Rcpp::wrap(inertia_choice(edgelist, adjmat, riskset, actors, start, stop, scaling));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_inertia_choice(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_inertia_choice_try(edgelistSEXP, adjmatSEXP, risksetSEXP, actorsSEXP, startSEXP, stopSEXP, scalingSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reciprocity_choice
arma::mat reciprocity_choice(const arma::mat& edgelist, const arma::mat& adjmat, const arma::mat& riskset, const arma::vec& actors, int start, int stop, int scaling);
static SEXP _remstats_reciprocity_choice_try(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< int >::type scaling(scalingSEXP);
    rcpp_result_gen = Rcpp::wrap(reciprocity_choice(edgelist, adjmat, riskset, actors, start, stop, scaling));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_reciprocity_choice(SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_reciprocity_choice_try(edgelistSEXP, adjmatSEXP, risksetSEXP, actorsSEXP, startSEXP, stopSEXP, scalingSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// triad_choice
arma::mat triad_choice(int type, const arma::mat& edgelist, const arma::mat& adjmat, const arma::mat& riskset, const arma::vec& actors, int start, int stop, int scaling);
static SEXP _remstats_triad_choice_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< int >::type scaling(scalingSEXP);
    rcpp_result_gen = Rcpp::wrap(triad_choice(type, edgelist, adjmat, riskset, actors, start, stop, scaling));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_triad_choice(SEXP typeSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP scalingSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_triad_choice_try(typeSEXP, edgelistSEXP, adjmatSEXP, risksetSEXP, actorsSEXP, startSEXP, stopSEXP, scalingSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rrank_choice
arma::mat rrank_choice(int type, const arma::mat& edgelist, const arma::mat& riskset, const arma::vec& actors, int start, int stop);
static SEXP _remstats_rrank_choice_try(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(rrank_choice(type, edgelist, riskset, actors, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_rrank_choice(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP actorsSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_rrank_choice_try(typeSEXP, edgelistSEXP, risksetSEXP, actorsSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_stats_rate
arma::cube compute_stats_rate(const arma::vec& effects, const arma::mat& edgelist, const arma::mat& riskset, const arma::mat& adjmat, const arma::vec& actors, const arma::vec& scaling, const Rcpp::List& covariates, const Rcpp::List& interactions, int start, int stop);
static SEXP _remstats_compute_stats_rate_try(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP scalingSEXP, SEXP covariatesSEXP, SEXP interactionsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type effects(effectsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_stats_rate(effects, edgelist, riskset, adjmat, actors, scaling, covariates, interactions, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_compute_stats_rate(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP scalingSEXP, SEXP covariatesSEXP, SEXP interactionsSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_compute_stats_rate_try(effectsSEXP, edgelistSEXP, risksetSEXP, adjmatSEXP, actorsSEXP, scalingSEXP, covariatesSEXP, interactionsSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_stats_choice
arma::cube compute_stats_choice(const arma::vec& effects, const arma::mat& edgelist, const arma::mat& adjmat, const arma::vec& actors, const arma::mat& riskset, const arma::vec& scaling, const Rcpp::List& covariates, const Rcpp::List& interactions, int start, int stop);
static SEXP _remstats_compute_stats_choice_try(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP risksetSEXP, SEXP scalingSEXP, SEXP covariatesSEXP, SEXP interactionsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type effects(effectsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type adjmat(adjmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_stats_choice(effects, edgelist, adjmat, actors, riskset, scaling, covariates, interactions, start, stop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _remstats_compute_stats_choice(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP adjmatSEXP, SEXP actorsSEXP, SEXP risksetSEXP, SEXP scalingSEXP, SEXP covariatesSEXP, SEXP interactionsSEXP, SEXP startSEXP, SEXP stopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_remstats_compute_stats_choice_try(effectsSEXP, edgelistSEXP, adjmatSEXP, actorsSEXP, risksetSEXP, scalingSEXP, covariatesSEXP, interactionsSEXP, startSEXP, stopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _remstats_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("int(*find_dyad)(int,int,int,int,bool)");
        signatures.insert("arma::mat(*standardize)(arma::mat)");
        signatures.insert("arma::mat(*compute_adjmat)(const arma::mat&,int,int,bool,int,double,int,int)");
        signatures.insert("arma::mat(*actorStat_tie)(int,const arma::mat&,const arma::mat&,const arma::vec&,const arma::vec&,int,int,int)");
        signatures.insert("arma::mat(*dyadStat_tie)(int,const arma::mat&,const arma::mat&,const arma::mat&,int,int)");
        signatures.insert("arma::mat(*inertia_tie)(const arma::mat&,const arma::mat&,const arma::mat&,int,bool,const arma::vec&,int,int,bool)");
        signatures.insert("arma::mat(*reciprocity_tie)(const arma::mat&,const arma::mat&,const arma::mat&,int,const arma::vec&,int,int,bool)");
        signatures.insert("arma::mat(*degree_tie)(int,const arma::mat&,const arma::mat&,const arma::vec&,const arma::vec&,int,int,bool)");
        signatures.insert("arma::mat(*triad_tie)(int,const arma::mat&,const arma::vec&,const arma::vec&,const arma::mat&,const arma::mat&,int,int,bool)");
        signatures.insert("arma::mat(*pshift_tie)(int,const arma::mat&,const arma::mat&,int,int,int,int,bool)");
        signatures.insert("arma::mat(*rrank_tie)(int,const arma::mat&,const arma::mat&,int,int,int,int,bool)");
        signatures.insert("arma::mat(*recency_tie)(int,const arma::mat&,const arma::mat&,int,int,int,int,bool,bool)");
        signatures.insert("arma::mat(*tie_tie)(const arma::mat&,const arma::mat&,const arma::mat&,int,int)");
        signatures.insert("arma::mat(*event_tie)(const arma::mat&,const arma::mat&,const arma::mat&,int,int)");
        signatures.insert("arma::mat(*FEtype_tie)(const arma::mat&,const arma::mat&,const arma::mat&,int,int)");
        signatures.insert("arma::cube(*compute_stats_tie)(const arma::vec&,const arma::mat&,const arma::mat&,const arma::vec&,const arma::vec&,const arma::mat&,const arma::vec&,const Rcpp::List&,const Rcpp::List&,int,int,bool)");
        signatures.insert("arma::mat(*actorStat_rc)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::vec&,int,int,int)");
        signatures.insert("arma::mat(*degree_rc)(int,const arma::mat&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*recency_rc)(int,const arma::mat&,const arma::mat&,int,int,int)");
        signatures.insert("arma::mat(*dyadStat_choice)(int,const arma::mat&,const arma::mat&,const arma::mat&,const arma::vec&,int,int)");
        signatures.insert("arma::mat(*tie_choice)(const arma::mat&,const arma::mat&,const arma::vec&,const arma::mat&,int,int)");
        signatures.insert("arma::mat(*inertia_choice)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::vec&,int,int,int)");
        signatures.insert("arma::mat(*reciprocity_choice)(const arma::mat&,const arma::mat&,const arma::mat&,const arma::vec&,int,int,int)");
        signatures.insert("arma::mat(*triad_choice)(int,const arma::mat&,const arma::mat&,const arma::mat&,const arma::vec&,int,int,int)");
        signatures.insert("arma::mat(*rrank_choice)(int,const arma::mat&,const arma::mat&,const arma::vec&,int,int)");
        signatures.insert("arma::cube(*compute_stats_rate)(const arma::vec&,const arma::mat&,const arma::mat&,const arma::mat&,const arma::vec&,const arma::vec&,const Rcpp::List&,const Rcpp::List&,int,int)");
        signatures.insert("arma::cube(*compute_stats_choice)(const arma::vec&,const arma::mat&,const arma::mat&,const arma::vec&,const arma::mat&,const arma::vec&,const Rcpp::List&,const Rcpp::List&,int,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _remstats_RcppExport_registerCCallable() { 
    R_RegisterCCallable("remstats", "_remstats_find_dyad", (DL_FUNC)_remstats_find_dyad_try);
    R_RegisterCCallable("remstats", "_remstats_standardize", (DL_FUNC)_remstats_standardize_try);
    R_RegisterCCallable("remstats", "_remstats_compute_adjmat", (DL_FUNC)_remstats_compute_adjmat_try);
    R_RegisterCCallable("remstats", "_remstats_actorStat_tie", (DL_FUNC)_remstats_actorStat_tie_try);
    R_RegisterCCallable("remstats", "_remstats_dyadStat_tie", (DL_FUNC)_remstats_dyadStat_tie_try);
    R_RegisterCCallable("remstats", "_remstats_inertia_tie", (DL_FUNC)_remstats_inertia_tie_try);
    R_RegisterCCallable("remstats", "_remstats_reciprocity_tie", (DL_FUNC)_remstats_reciprocity_tie_try);
    R_RegisterCCallable("remstats", "_remstats_degree_tie", (DL_FUNC)_remstats_degree_tie_try);
    R_RegisterCCallable("remstats", "_remstats_triad_tie", (DL_FUNC)_remstats_triad_tie_try);
    R_RegisterCCallable("remstats", "_remstats_pshift_tie", (DL_FUNC)_remstats_pshift_tie_try);
    R_RegisterCCallable("remstats", "_remstats_rrank_tie", (DL_FUNC)_remstats_rrank_tie_try);
    R_RegisterCCallable("remstats", "_remstats_recency_tie", (DL_FUNC)_remstats_recency_tie_try);
    R_RegisterCCallable("remstats", "_remstats_tie_tie", (DL_FUNC)_remstats_tie_tie_try);
    R_RegisterCCallable("remstats", "_remstats_event_tie", (DL_FUNC)_remstats_event_tie_try);
    R_RegisterCCallable("remstats", "_remstats_FEtype_tie", (DL_FUNC)_remstats_FEtype_tie_try);
    R_RegisterCCallable("remstats", "_remstats_compute_stats_tie", (DL_FUNC)_remstats_compute_stats_tie_try);
    R_RegisterCCallable("remstats", "_remstats_actorStat_rc", (DL_FUNC)_remstats_actorStat_rc_try);
    R_RegisterCCallable("remstats", "_remstats_degree_rc", (DL_FUNC)_remstats_degree_rc_try);
    R_RegisterCCallable("remstats", "_remstats_recency_rc", (DL_FUNC)_remstats_recency_rc_try);
    R_RegisterCCallable("remstats", "_remstats_dyadStat_choice", (DL_FUNC)_remstats_dyadStat_choice_try);
    R_RegisterCCallable("remstats", "_remstats_tie_choice", (DL_FUNC)_remstats_tie_choice_try);
    R_RegisterCCallable("remstats", "_remstats_inertia_choice", (DL_FUNC)_remstats_inertia_choice_try);
    R_RegisterCCallable("remstats", "_remstats_reciprocity_choice", (DL_FUNC)_remstats_reciprocity_choice_try);
    R_RegisterCCallable("remstats", "_remstats_triad_choice", (DL_FUNC)_remstats_triad_choice_try);
    R_RegisterCCallable("remstats", "_remstats_rrank_choice", (DL_FUNC)_remstats_rrank_choice_try);
    R_RegisterCCallable("remstats", "_remstats_compute_stats_rate", (DL_FUNC)_remstats_compute_stats_rate_try);
    R_RegisterCCallable("remstats", "_remstats_compute_stats_choice", (DL_FUNC)_remstats_compute_stats_choice_try);
    R_RegisterCCallable("remstats", "_remstats_RcppExport_validate", (DL_FUNC)_remstats_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_remstats_find_dyad", (DL_FUNC) &_remstats_find_dyad, 5},
    {"_remstats_standardize", (DL_FUNC) &_remstats_standardize, 1},
    {"_remstats_compute_adjmat", (DL_FUNC) &_remstats_compute_adjmat, 8},
    {"_remstats_actorStat_tie", (DL_FUNC) &_remstats_actorStat_tie, 8},
    {"_remstats_dyadStat_tie", (DL_FUNC) &_remstats_dyadStat_tie, 6},
    {"_remstats_inertia_tie", (DL_FUNC) &_remstats_inertia_tie, 9},
    {"_remstats_reciprocity_tie", (DL_FUNC) &_remstats_reciprocity_tie, 8},
    {"_remstats_degree_tie", (DL_FUNC) &_remstats_degree_tie, 8},
    {"_remstats_triad_tie", (DL_FUNC) &_remstats_triad_tie, 9},
    {"_remstats_pshift_tie", (DL_FUNC) &_remstats_pshift_tie, 8},
    {"_remstats_rrank_tie", (DL_FUNC) &_remstats_rrank_tie, 8},
    {"_remstats_recency_tie", (DL_FUNC) &_remstats_recency_tie, 9},
    {"_remstats_tie_tie", (DL_FUNC) &_remstats_tie_tie, 5},
    {"_remstats_event_tie", (DL_FUNC) &_remstats_event_tie, 5},
    {"_remstats_FEtype_tie", (DL_FUNC) &_remstats_FEtype_tie, 5},
    {"_remstats_compute_stats_tie", (DL_FUNC) &_remstats_compute_stats_tie, 12},
    {"_remstats_actorStat_rc", (DL_FUNC) &_remstats_actorStat_rc, 7},
    {"_remstats_degree_rc", (DL_FUNC) &_remstats_degree_rc, 4},
    {"_remstats_recency_rc", (DL_FUNC) &_remstats_recency_rc, 6},
    {"_remstats_dyadStat_choice", (DL_FUNC) &_remstats_dyadStat_choice, 7},
    {"_remstats_tie_choice", (DL_FUNC) &_remstats_tie_choice, 6},
    {"_remstats_inertia_choice", (DL_FUNC) &_remstats_inertia_choice, 7},
    {"_remstats_reciprocity_choice", (DL_FUNC) &_remstats_reciprocity_choice, 7},
    {"_remstats_triad_choice", (DL_FUNC) &_remstats_triad_choice, 8},
    {"_remstats_rrank_choice", (DL_FUNC) &_remstats_rrank_choice, 6},
    {"_remstats_compute_stats_rate", (DL_FUNC) &_remstats_compute_stats_rate, 10},
    {"_remstats_compute_stats_choice", (DL_FUNC) &_remstats_compute_stats_choice, 10},
    {"_remstats_RcppExport_registerCCallable", (DL_FUNC) &_remstats_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_remstats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
