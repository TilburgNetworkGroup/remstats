// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// standardize
arma::mat standardize(arma::mat stat);
RcppExport SEXP _remstats_standardize(SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize(stat));
    return rcpp_result_gen;
END_RCPP
}
// divide_by_past
arma::mat divide_by_past(arma::mat stat);
RcppExport SEXP _remstats_divide_by_past(SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(divide_by_past(stat));
    return rcpp_result_gen;
END_RCPP
}
// divide_by_2past
arma::mat divide_by_2past(arma::mat stat);
RcppExport SEXP _remstats_divide_by_2past(SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(divide_by_2past(stat));
    return rcpp_result_gen;
END_RCPP
}
// compute_actorEffect
arma::mat compute_actorEffect(const arma::mat& values, int type, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop);
RcppExport SEXP _remstats_compute_actorEffect(SEXP valuesSEXP, SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_actorEffect(values, type, edgelist, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_dyadEffect
arma::mat compute_dyadEffect(const arma::mat& values, int type, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop, double equal_val);
RcppExport SEXP _remstats_compute_dyadEffect(SEXP valuesSEXP, SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP equal_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< double >::type equal_val(equal_valSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dyadEffect(values, type, edgelist, riskset, start, stop, equal_val));
    return rcpp_result_gen;
END_RCPP
}
// compute_inertia
arma::mat compute_inertia(const arma::mat& edgelist, const arma::mat& riskset, double memory_value, bool with_type, const arma::vec& event_weights, int start, int stop);
RcppExport SEXP _remstats_compute_inertia(SEXP edgelistSEXP, SEXP risksetSEXP, SEXP memory_valueSEXP, SEXP with_typeSEXP, SEXP event_weightsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< double >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type event_weights(event_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_inertia(edgelist, riskset, memory_value, with_type, event_weights, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_reciprocity
arma::mat compute_reciprocity(const arma::mat& edgelist, const arma::mat& riskset, double memory_value, bool with_type, const arma::vec& event_weights, int start, int stop);
RcppExport SEXP _remstats_compute_reciprocity(SEXP edgelistSEXP, SEXP risksetSEXP, SEXP memory_valueSEXP, SEXP with_typeSEXP, SEXP event_weightsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< double >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type event_weights(event_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_reciprocity(edgelist, riskset, memory_value, with_type, event_weights, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_degree
arma::mat compute_degree(int type, const arma::mat& edgelist, const arma::mat& riskset, double memory_value, bool with_type, const arma::vec& event_weights, int start, int stop);
RcppExport SEXP _remstats_compute_degree(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP memory_valueSEXP, SEXP with_typeSEXP, SEXP event_weightsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< double >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type event_weights(event_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_degree(type, edgelist, riskset, memory_value, with_type, event_weights, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_triad
arma::mat compute_triad(int type, const arma::mat& edgelist, const arma::mat& riskset, double memory_value, bool with_type, const arma::vec& event_weights, int start, int stop);
RcppExport SEXP _remstats_compute_triad(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP memory_valueSEXP, SEXP with_typeSEXP, SEXP event_weightsSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< double >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type event_weights(event_weightsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_triad(type, edgelist, riskset, memory_value, with_type, event_weights, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_pshift
arma::mat compute_pshift(int type, const arma::mat& edgelist, const arma::mat& riskset, bool with_type, int start, int stop);
RcppExport SEXP _remstats_compute_pshift(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP with_typeSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< bool >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pshift(type, edgelist, riskset, with_type, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_rrank
arma::mat compute_rrank(int type, const arma::mat& edgelist, const arma::mat& riskset, bool with_type, int start, int stop);
RcppExport SEXP _remstats_compute_rrank(SEXP typeSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP with_typeSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< bool >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_rrank(type, edgelist, riskset, with_type, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_baselineType
arma::mat compute_baselineType(const arma::mat& values, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop);
RcppExport SEXP _remstats_compute_baselineType(SEXP valuesSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_baselineType(values, edgelist, riskset, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// compute_interact
arma::mat compute_interact(arma::mat x, arma::cube statistics);
RcppExport SEXP _remstats_compute_interact(SEXP xSEXP, SEXP statisticsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type statistics(statisticsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_interact(x, statistics));
    return rcpp_result_gen;
END_RCPP
}
// compute_eventEffect
arma::mat compute_eventEffect(arma::mat x, arma::cube statistics);
RcppExport SEXP _remstats_compute_eventEffect(SEXP xSEXP, SEXP statisticsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type statistics(statisticsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_eventEffect(x, statistics));
    return rcpp_result_gen;
END_RCPP
}
// recency
Rcpp::NumericMatrix recency(Rcpp::NumericMatrix edgelist, Rcpp::NumericMatrix riskset, Rcpp::NumericVector nodes, int memory_value, int type);
RcppExport SEXP _remstats_recency(SEXP edgelistSEXP, SEXP risksetSEXP, SEXP nodesSEXP, SEXP memory_valueSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< int >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(recency(edgelist, riskset, nodes, memory_value, type));
    return rcpp_result_gen;
END_RCPP
}
// compute_stats
arma::cube compute_stats(const arma::vec& effects, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop, const Rcpp::List& values, const arma::vec& scaling, const arma::vec& memory_value, const arma::vec& with_type, const arma::mat& event_weights, const arma::vec& equal_val);
RcppExport SEXP _remstats_compute_stats(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP valuesSEXP, SEXP scalingSEXP, SEXP memory_valueSEXP, SEXP with_typeSEXP, SEXP event_weightsSEXP, SEXP equal_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type effects(effectsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type event_weights(event_weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type equal_val(equal_valSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_stats(effects, edgelist, riskset, start, stop, values, scaling, memory_value, with_type, event_weights, equal_val));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_remstats_standardize", (DL_FUNC) &_remstats_standardize, 1},
    {"_remstats_divide_by_past", (DL_FUNC) &_remstats_divide_by_past, 1},
    {"_remstats_divide_by_2past", (DL_FUNC) &_remstats_divide_by_2past, 1},
    {"_remstats_compute_actorEffect", (DL_FUNC) &_remstats_compute_actorEffect, 6},
    {"_remstats_compute_dyadEffect", (DL_FUNC) &_remstats_compute_dyadEffect, 7},
    {"_remstats_compute_inertia", (DL_FUNC) &_remstats_compute_inertia, 7},
    {"_remstats_compute_reciprocity", (DL_FUNC) &_remstats_compute_reciprocity, 7},
    {"_remstats_compute_degree", (DL_FUNC) &_remstats_compute_degree, 8},
    {"_remstats_compute_triad", (DL_FUNC) &_remstats_compute_triad, 8},
    {"_remstats_compute_pshift", (DL_FUNC) &_remstats_compute_pshift, 6},
    {"_remstats_compute_rrank", (DL_FUNC) &_remstats_compute_rrank, 6},
    {"_remstats_compute_baselineType", (DL_FUNC) &_remstats_compute_baselineType, 5},
    {"_remstats_compute_interact", (DL_FUNC) &_remstats_compute_interact, 2},
    {"_remstats_compute_eventEffect", (DL_FUNC) &_remstats_compute_eventEffect, 2},
    {"_remstats_recency", (DL_FUNC) &_remstats_recency, 5},
    {"_remstats_compute_stats", (DL_FUNC) &_remstats_compute_stats, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_remstats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
