% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/effects.R
\name{send}
\alias{send}
\title{send}
\usage{
send(variable, attr_actors = NULL, scaling = c("none", "std"), attr_data)
}
\arguments{
\item{variable}{string with the name of the column in the
\code{attr_actors} object for which the statistic has to be computed.}

\item{attr_actors}{optionally, an object of class
\code{\link[base]{data.frame}} that contains the attribute, see
'Details.'}

\item{scaling}{the method for scaling the statistic. Default is to not scale
the statistic. Alternatively, standardization of the
statistic per time point can be requested with "std".}

\item{attr_data}{Deprecated argument. Please use 'attr_actors' instead.}
}
\description{
Specifies the statistic for a "send" effect in the tie-oriented model or the
actor activity rate step of the actor-oriented model. A "send" effect refers
to an exogenous actor attribute that affects actor \emph{i}'s rate of
sending events.
}
\details{
The statistic at timepoint \emph{t} is equal to the value of the exogenous
attribute for actor \emph{i} at time \emph{t} for all dyads in the risk set
that have actor \emph{i} as sender. Note that a "send" effect is only
defined for directed relational events.

The \code{attr_actors} object should be constructed as a
\code{\link[base]{data.frame}} where each row refers to the attribute value
of actor \emph{i} at timepoint \emph{t}:
\itemize{
 \item{\code{name}: the actors' name}
 \item{\code{time}: the time when the attribute values change (set to a
column with only zero's if the attribute does not vary over time).}
 \item{}{the third column contains the attribute that is called in the
specification of the "send" effect (i.e., the column name should correspond
to the string that is supplied to the \code{variable} argument)}
}
Note that it is possible to omit the attr_actors object in the call of
\code{send()} and, instead, supply it in the call of \code{remstats()} for
multiple exogenous effects.
}
\examples{
reh_tie <- remify::remify(history, model = "tie")
effects <- ~ send("extraversion")
remstats(reh = reh_tie, tie_effects = effects, attr_actors = info)

reh_actor <- remify::remify(history, model = "actor")
remstats(reh = reh_actor, sender_effects = effects, attr_actors = info)

}
