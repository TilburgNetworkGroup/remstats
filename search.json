[{"path":"https://tilburgnetworkgroup.github.io/remstats/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 remstats authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/articles/remstats.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"remstats","text":"Relational event modeling approaches enable researchers investigate exogenous endogenous factors influencing evolution time-ordered sequence relational events - commonly known relational event history. models categorized tie-oriented models, probability dyad interacting next modeled single step (e.g., see Butts, 2008), actor-oriented models, first model probability sender initiating interaction subsequently probability senders’ choice receiver (e.g., see Stadtfeld & Block, 2017). R package remstats designed compute variety statistics types models. remstats package part bundle R-packages developed researchers Tilburg University intended aid applied researchers application relational event modeling. preparing relational event history, remstats assumes prior application remify::remify() (available CRAN). Model estimation can subsequently executed using remstimate (available GitHub github.com/TilburgNetworkGroup/remstimate). following provides brief introduction computing statistics relational event history data remstats. ’ll begin quick workflow example, followed detailed description procedure tie-oriented model. Finally, ’ll provide explanation procedure actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/articles/remstats.html","id":"workflow-example","dir":"Articles","previous_headings":"","what":"Workflow example","title":"remstats","text":"","code":"# Load data data(history) data(info)  # Define effects effects <- ~ 1 + send(\"extraversion\", info) + inertia()  # Prepare event history with the 'remify package' rehObject <- remify::remify(edgelist = history, model = \"tie\")  # Compute statistics statsObject <- remstats(reh = rehObject, tie_effects = effects)  # Estimate model parameters with the 'remstimate' package # fit <- remstimate::remstimate(reh = rehObject, stats = statsObject, #   method = \"MLE\", timing = \"interval\")"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/articles/remstats.html","id":"data","dir":"Articles","previous_headings":"Getting started","what":"Data","title":"remstats","text":"Relational event history data describes time-ordered series interactions actors network. interactions referred relational events. relational event minimally contains information time event actors involved event. illustration, use history data object remstats package. data object randomly generated relational event history. description simulated data can accessed ?history. , read history small simulated relational event history 115 events. Besides information time actors, event also information setting event weight. can view first six events : prepare relational event history computation statistics tie-oriented model remify function remify package. Whenever weight variable present edgelist supplied remify, assumes want use weight events computation statistics. example, don’t want , thus set weight one events: Besides relational event history , relational event modeling often requires second data object exogenous information actors network. Information actors simulated data example remstats stored info object. description info data can accessed ?info. , read info object stores 10 actors network information age, sex, extraversion agreeableness score. Moreover, extraversion agreeableness measured multiple times observation period. time variable tells us values change. can view attribute information first two actors :","code":"head(history) #>   time actor1 actor2 setting weight #> 1  238    105    113    work   1.33 #> 2  317    105    109    work   1.64 #> 3  345    115    112    work   1.82 #> 4  627    101    115  social   1.25 #> 5  832    113    107  social   1.67 #> 6  842    105    109    work   2.30 history$weight <- 1 reh <- remify::remify(edgelist = history, model = \"tie\") head(info) #>   name  time age sex extraversion agreeableness #> 1  101     0   0   0        -0.40         -0.14 #> 2  101  9432   0   0        -0.32         -0.26 #> 3  101 18864   0   0        -0.53         -0.45 #> 4  103     0   0   0        -0.13         -0.65 #> 5  103  9432   0   0        -0.43         -0.44 #> 6  103 18864   0   0        -0.13         -0.43"},{"path":"https://tilburgnetworkgroup.github.io/remstats/articles/remstats.html","id":"compute-statistics-for-the-tie-oriented-model","dir":"Articles","previous_headings":"Getting started","what":"Compute statistics for the tie-oriented model","title":"remstats","text":"First, compute statistics modeling relational event history data tie-oriented model. statistics requested need supplied tie_effects argument remstats(), specified object class formula. specification form ~ terms. overview statistics can computed tie-oriented model available using tie_effects() function help documentation ?tie_effects: illustration, start requesting one statistic: inertia statistic. statistics can tailored user’s needs. example, lets view description inertia statistic using ?inertia. , can read inertia statistic computes every timepoint t every pair actors (,j) riskset number past events. scaling argument, one methods scaling statistic can chosen. consider_type argument relevant event types dependent variable, consider example. illustration, standardize inertia statistic. request statistic, define formula follows:s Now, everything need compute first statistic: remstats() function outputs 3-dimensional array statistics tie-oriented model. rows array timepoints, columns refer potential events riskset slices refer different statistics: statistics object 115 rows, corresponding 115 time points relational event history. 90 columns, corresponding 90 events riskset. statistics object two slices, baseline statistics automatically computed timing events relational event history exact (unless removed specifying -1 effects formula) saved first slice. remstats() procedure assumes timing events relational event history exact full likelihood used estimation, unless argument ordinal remify::remify() set TRUE. can view names statistics statistics object : , see , indeed, baseline inertia statistic computed. Since request anything special riskset remify::remify(), consists every directed pair actors observed relational event history, 10*9 = 90 pairs. pairs saved riskset attribute. can ask first lines riskset: , see first event riskset event actor 101 sends interaction directed towards actor 103. id column refers column statistic object contains statistic(s) specific dyad. first column statistic object refers first event riskset, second column statistic object second event riskset, forth. Inertia example endogenous statistic: function relational event history . Next, going add request exogenous statistic. need exogenous information actors info object. illustration, going request statistic effect extraversion sending events, .e., send effect. description send effect accessed ?send. , read need supply variable want specify sender effect variable correspond column attr_actors object supply. Thus, specify send effect extraversion send(\"extraversion\", attr_actors = info). , specify attr_actors object within send() function. Alternatively, can supplied remstats(). example useful want compute bunch exogenous statistics using attr_actors object. Statistics effects formula separated +. Finally, add interaction inertia() statistic send() statistic. can done using * : operator:","code":"effects <- ~ inertia(scaling = \"std\") out <- remstats(tie_effects = effects, reh = reh) dim(out) #> [1] 115  90   2 out #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #>   >> 1: baseline #>   >> 2: inertia head(attr(out, \"riskset\")) #>   sender receiver id #> 1    101      103  1 #> 2    101      104  2 #> 3    101      105  3 #> 4    101      107  4 #> 5    101      109  5 #> 6    101      111  6 effects <- ~ inertia(scaling = \"std\") + send(\"extraversion\", info) +      inertia(scaling = \"std\"):send(\"extraversion\", info)  out <- remstats(tie_effects = effects, reh = reh)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/articles/remstats.html","id":"compute-statistics-for-the-actor-oriented-model","dir":"Articles","previous_headings":"Getting started","what":"Compute statistics for the actor-oriented model","title":"remstats","text":"procedure compute statistics actor-oriented model largely similar written , except statistics specified separately sender activity rate step model receiver choice step model. statistics requested two modeling steps need supplied two different effects arguments, namely sender_effects receiver_effects, respectively. overview statistics available actor-oriented model two modeling steps can obtained using actor_effects() function help documentation ?actor_effects. illustration, start requesting one statistic sender activity rate step: outdegreeSender statistic. First, lets view description outdegreeSender statistic using ?outdegreeSender. , can read , sender activity rate step actor-oriented model, outdegreeSender statistic computes every timepoint t every actors number outgoing past events. scaling argument, one methods scaling statistic can chosen. First, prepare event history computing statistics actor-oriented model: compute outdegreeSender statistic sender activity rate step supply sender_effects argument remstats(): outputted remstats object now list two elements: sender_stats receiver_stats: Since request statistics receiver choice step , receiver_stats object empty. sender_stats object contains statistic array baseline statistic (, automatically computed unless ordinal = TRUE), requested outdegreeSender statistic: dimension $sender_stats 115 x 10 x 2. rows timepoints, columns refer actors can senders slices refer different statistics. Lets extend model also request statistic receiver choice step: can access statistic computed receiver choice step $receiver_stats. step, baseline statistic automatically computed (defined). Hence, dimensions statistics object receiver choice step 115 x 10 x 1. rows timepoints, columns now receivers slices statistics. Note computed values statistic receiver choice step equal values receiver, given current sender. example, lets review first six lines: first timepoint, inertia statistic receivers given current sender (actor 105) zero prior events occurred. second timepoint, sender actor 105. Now inertia statistic equal 1 receiver first event (actor 113). third timepoint, inertia statistic zero receivers now sending actor 115, send prior events.","code":"reh <- remify::remify(edgelist = history, model = \"actor\") effects <- ~ outdegreeSender() out <- remstats(sender_effects = effects, reh = reh) names(out) #> [1] \"sender_stats\"   \"receiver_stats\" out #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #>   >> Dimensions: 115 time points x 10 actors x 2 statistics #>   >> Statistics: #>       >>> 1: baseline #>       >>> 2: outdegreeSender sender_effects <- ~ outdegreeSender() receiver_effects <- ~ inertia() out <- remstats(sender_effects = sender_effects, receiver_effects = receiver_effects, reh = reh) # Set the column names equal to the receivers colnames(out$receiver_stats) <- attributes(reh)$dictionary$actors$actorName # Set the rownames equal to the senders rownames(out$receiver_stats) <- reh$edgelist$actor1 # View the first six lines head(out$receiver_stats[,,\"inertia\"]) #>     101 103 104 105 107 109 111 112 113 115 #> 105   0   0   0   0   0   0   0   0   0   0 #> 105   0   0   0   0   0   0   0   0   1   0 #> 115   0   0   0   0   0   0   0   0   0   0 #> 101   0   0   0   0   0   0   0   0   0   0 #> 113   0   0   0   0   0   0   0   0   0   0 #> 105   0   0   0   0   0   1   0   0   1   0"},{"path":"https://tilburgnetworkgroup.github.io/remstats/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giuseppe Arena. Author, maintainer. Marlyne Meijerink-Bosman. Author. Diana Karimova. Contributor. Rumana Lakdawala. Contributor. Mahdi Shafiee Kamalabad. Contributor. Fabio Generoso Vieira. Contributor. Roger Leenders. Contributor. Joris Mulder. Contributor.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Arena G, Meijerink-Bosman M (2025). remstats: Computes Statistics Relational Event History Data. R package version 3.2.4, https://tilburgnetworkgroup.github.io/remstats/.","code":"@Manual{,   title = {remstats: Computes Statistics for Relational Event History Data},   author = {Giuseppe Arena and Marlyne Meijerink-Bosman},   year = {2025},   note = {R package version 3.2.4},   url = {https://tilburgnetworkgroup.github.io/remstats/}, }"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/index.html","id":"computes-statistics-for-relational-event-history-data","dir":"","previous_headings":"remstats","what":"Computes Statistics for Relational Event History Data","title":"Computes Statistics for Relational Event History Data","text":"remstats package designed compute variety statistics relational event models. Relational event modeling approaches enable researchers investigate exogenous endogenous factors influencing evolution time-ordered sequence relational events. models categorized tie-oriented models, probability dyad interacting next modeled single step (e.g., see Butts, 2008), actor-oriented models, first model probability sender initiating interaction subsequently probability senders’ choice receiver (e.g., see Stadtfeld & Block, 2017). remstats package designed compute variety statistics characterize exogenous endogenous influences event stream types models. package part bundle R-packages developed researchers Tilburg University intended aid applied researchers application relational event modeling. preparing relational event history, remstats assumes prior application remify::remify() (available CRAN Github). Model estimation can subsequently executed using remstimate (available CRAN GitHub).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/index.html","id":"installation","dir":"","previous_headings":"remstats","what":"Installation","title":"Computes Statistics for Relational Event History Data","text":"install package R CRAN, use:","code":"install.packages(\"remstats\") library(remstats)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/index.html","id":"workflow-example","dir":"","previous_headings":"remstats","what":"Workflow example","title":"Computes Statistics for Relational Event History Data","text":"","code":"# Load example data data(history) data(info)  # Define effects effects <- ~ 1 + send(\"extraversion\", info) + inertia()  # Prepare event history with the 'remify package'  # Install with install.packages(\"remify\") rehObject <- remify::remify(edgelist = history, model = \"tie\")  # Compute statistics statsObject <- remstats(reh = rehObject, tie_effects = effects)  # Estimate model parameters with the 'remstimate' package # Install with install.packages(\"remstimate\") fit <- remstimate::remstimate(reh = rehObject, stats = statsObject,     method = \"MLE\", timing = \"interval\")"},{"path":"https://tilburgnetworkgroup.github.io/remstats/index.html","id":"support","dir":"","previous_headings":"remstats","what":"Support","title":"Computes Statistics for Relational Event History Data","text":"","code":"# To view all vignettes in the remstats package vignette(package = \"remstats\")  #To view all help files in the remstats package help(package=\"remstats\")  #To view available effects for the tie-oriented model help(\"all_tie_effects\")  #To view available effects for the actor-oriented model help(\"all_actor_effects\")"},{"path":"https://tilburgnetworkgroup.github.io/remstats/index.html","id":"problems-while-using-remstats","dir":"","previous_headings":"remstats","what":"Problems while using remstats?","title":"Computes Statistics for Relational Event History Data","text":"encounter errors using package, questions answered Vignettes, reporting kind malfunction package, can open issue . opening issue, please, use descriptive title clearly states issue, thorough possible describing issue, provide code snippets can reproduce issue.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/FEtype.html","id":null,"dir":"Reference","previous_headings":"","what":"FEtype — FEtype","title":"FEtype — FEtype","text":"Specifies statistic fixed effects event types tie-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/FEtype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FEtype — FEtype","text":"","code":"FEtype()"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/FEtype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FEtype — FEtype","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/FEtype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FEtype — FEtype","text":"Fixed effects event types capture variation event rate across different event types (e.g., see Butts, 2008). specification FEtype results creation C-1 statistics, C number different event types riskset. Let one event types, e.g. c = 1, represent reference category. , every event type c = 2, ..., C, statistic created timepoint t dyad (,j,c) equal 1 c equal respective event type equal 0 otherwise (.e., dummy variables created). Note specifying fixed effects event types available event types modeled dependent variable.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/FEtype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FEtype — FEtype","text":"","code":"history$type <- history$setting reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ FEtype() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 180 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: FEtype_work"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/actor_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"actor_effects — actor_effects","title":"actor_effects — actor_effects","text":"Overview statistics actor-oriented model, see Details.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/actor_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"actor_effects — actor_effects","text":"","code":"actor_effects(step = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/actor_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"actor_effects — actor_effects","text":"step outputs statistics sender activity step (`step = sender`) receiver choice step (`step = receiver`).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/actor_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"actor_effects — actor_effects","text":"Returns list available effects corresponding statistics based specified `step` (sender receiver).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/actor_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"actor_effects — actor_effects","text":"Overview statistics actor-oriented model. list available effects corresponding statistics sender activity rate step: baseline() send() indegreeSender() outdegreeSender() totaldegreeSender() recencySendSender() recencyReceiveSender() psABA() psABB() psABX() list available effects corresponding statistics receiver choice step: receive() tie() () difference() average() indegreeReceiver() outdegreeReceiver() totaldegreeReceiver() inertia() reciprocity() otp() itp() osp() isp() rrankSend() rrankReceive() recencySendReceiver() recencyReceiveReceiver() recencyContinue() psABAB() psABBA() psABXA() psABXB() psABAY() psABBY() psABXY()","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/actor_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"actor_effects — actor_effects","text":"","code":"# List of available effects for both the sender and receiver step actor_effects() #> $sender #>  [1] \"baseline\"             \"send\"                 \"indegreeSender\"       #>  [4] \"outdegreeSender\"      \"totaldegreeSender\"    \"recencySendSender\"    #>  [7] \"recencyReceiveSender\" \"psABA\"                \"psABB\"                #> [10] \"psABX\"                \"userStat\"             #>  #> $receiver #>  [1] \"receive\"                \"same\"                   \"difference\"             #>  [4] \"average\"                \"tie\"                    \"inertia\"                #>  [7] \"reciprocity\"            \"indegreeReceiver\"       \"outdegreeReceiver\"      #> [10] \"totaldegreeReceiver\"    \"otp\"                    \"itp\"                    #> [13] \"osp\"                    \"isp\"                    \"rrankSend\"              #> [16] \"rrankReceive\"           \"recencySendReceiver\"    \"recencyReceiveReceiver\" #> [19] \"recencyContinue\"        \"psABBA\"                 \"psABAB\"                 #> [22] \"psABXB\"                 \"psABXA\"                 \"psABAY\"                 #> [25] \"psABBY\"                 \"psABXY\"                 \"userStat\"               #>   # List of available effects for the sender step actor_effects(step = \"sender\") #>  [1] \"baseline\"             \"send\"                 \"indegreeSender\"       #>  [4] \"outdegreeSender\"      \"totaldegreeSender\"    \"recencySendSender\"    #>  [7] \"recencyReceiveSender\" \"psABA\"                \"psABB\"                #> [10] \"psABX\"                \"userStat\"              # List of available effects for the receiver step actor_effects(step = \"receiver\") #>  [1] \"receive\"                \"same\"                   \"difference\"             #>  [4] \"average\"                \"tie\"                    \"inertia\"                #>  [7] \"reciprocity\"            \"indegreeReceiver\"       \"outdegreeReceiver\"      #> [10] \"totaldegreeReceiver\"    \"otp\"                    \"itp\"                    #> [13] \"osp\"                    \"isp\"                    \"rrankSend\"              #> [16] \"rrankReceive\"           \"recencySendReceiver\"    \"recencyReceiveReceiver\" #> [19] \"recencyContinue\"        \"psABBA\"                 \"psABAB\"                 #> [22] \"psABXB\"                 \"psABXA\"                 \"psABAY\"                 #> [25] \"psABBY\"                 \"psABXY\"                 \"userStat\""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":null,"dir":"Reference","previous_headings":"","what":"aomstats — aomstats","title":"aomstats — aomstats","text":"Computes statistics sender activity rate step receiver choice step actor-oriented relational event models (e.g., see Stadtfeld & Block, 2017).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aomstats — aomstats","text":"","code":"aomstats(   reh,   sender_effects = NULL,   receiver_effects = NULL,   attr_actors = NULL,   attr_dyads = NULL,   method = c(\"pt\", \"pe\"),   memory = c(\"full\", \"window\", \"decay\", \"interval\"),   memory_value = Inf,   start = 1,   stop = Inf,   display_progress = FALSE,   attr_data,   attributes,   edgelist )"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aomstats — aomstats","text":"reh object class \"remify\" characterizing relational event history. sender_effects object class \"formula\" (one can coerced class): symbolic description effects sender activity rate step actor-oriented model statistics computed, see `Details' receiver_effects object class \"formula\" (one can coerced class): symbolic description effects receiver choice step model statistics computed, see `Details' attr_actors optionally, object class \"data.frame\" contains exogenous attributes actors (see Details). attr_dyads optionally, object class data.frame matrix containing attribute information dyads (see Details). method Specifies method managing simultaneous events, .e., events occurring time. default 'method' 'pt' (per timepoint), statistics computed unique timepoint edgelist. Alternatively, can choose 'pe' (per event), statistics computed unique event observed edgelist. memory memory used. See `Details'. memory_value Numeric value indicating memory parameter. See `Details'. start optional integer value, specifying index first time event relational event history statistics must computed (see 'Details') stop optional integer value, specifying index last time event relational event history statistics must computed (see 'Details') display_progress progress bar computation endogenous statistics shown (TRUE) (FALSE)? attr_data deprecated, please use \"attr_actors\" instead attributes deprecated, please use \"attr_data\" instead edgelist deprecated, please use \"reh\" instead","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aomstats — aomstats","text":"object class 'aomstats'. List first element statistics sender activity rate step second element statistics receiver choice step. 'aomstats' object following attributes: model Type model estimated. formula Model formula(s), obtained formula(s) inputted 'sender_effects' /'receiver_effects'. actors set actors used construct statistics, obtained remify object inputted 'reh'.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"effects","dir":"Reference","previous_headings":"","what":"Effects","title":"aomstats — aomstats","text":"statistics computed defined symbolically supplied sender_effects /receiver_effects arguments form ~ effects. terms separated + operators. example: receiver_effects = ~ inertia() + otp(). Interactions two effects can included * : operators. example: receivereffects = ~ inertia():otp().  list available effects can obtained actor_effects(). majority statistics can scaled way, see documentation scaling argument separate effect functions information .","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"attr-actors","dir":"Reference","previous_headings":"","what":"attr_actors","title":"aomstats — aomstats","text":"computation exogenous statistics attributes object exogenous covariate information supplied attr_actors argument either remstats() separate effect functions supplied ..._effects arguments (e.g., see send). attr_actors object constructed follows: dataframe rows referring attribute value actor timepoint t. `name` column required contains actor name (corresponding actor names relational event history). `time` column required contains time attributes change (set zero none attributes vary time). Subsequent columns contain attributes called specifications exogenous statistics (column name corresponding string supplied variable argument effect function). Note procedure exogenous effects `tie' `event' deviates , exogenous covariate information specified different way, see tie event.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"attr-dyads","dir":"Reference","previous_headings":"","what":"attr_dyads","title":"aomstats — aomstats","text":"computation dyad exogenous statistics tie(), attributes object exogenous covariates information per dyad supplied. data.frame matrix containing attribute information dyads. attr_dyads data.frame, first two columns represent \"actor1\" \"actor2\" (directed events, \"actor1\" corresponds sender, \"actor2\" corresponds receiver). Additional columns can represent dyads' exogenous attributes. attributes vary time, include column named \"time\". attr_dyads matrix, rows correspond \"actor1\", columns \"actor2\", cells contain dyads' exogenous attributes.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"memory","dir":"Reference","previous_headings":"","what":"Memory","title":"aomstats — aomstats","text":"default `memory` setting `\"full\"`, implies time point $t$ entire event history $t$ included computation statistics. Alternatively, `memory` set `\"window\"`, past event history within given time window considered (see Mulders & Leenders, 2019). length time window set `memory_value` parameter. example, `memory_value = 100` `memory = \"window\"`, time point $t$ past events happened 100 time units ago included computation statistics. third option set `memory` `\"interval\"`. case, past event history within given time interval considered. example, `\"memory_value\" = c(50, 100)` `memory = \"window\"`, time point $t$ past events happened 50 100 time units ago included computation statistics. Finally, fourth option set `memory` `\"decay\"`. case, weight past event computation statistics depend elapsed time $t$ past event. weight determined based exponential decay function half-life parameter `memory_value` (see Brandes et al., 2009).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"event-weights","dir":"Reference","previous_headings":"","what":"Event weights","title":"aomstats — aomstats","text":"Note relational event history contains column named “weight”, assumed affect endogenous statistics. affect computation endogenous statistics exceptions follow logically definition (e.g., recenyContinue statistic depend time since event event weights).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"subset-of-the-relational-event-history","dir":"Reference","previous_headings":"","what":"Subset of the relational event history","title":"aomstats — aomstats","text":"Optionally, statistics can computed slice relational event sequence - based entire history. achieved setting start stop values equal index first last event statistics requested. example, start = 5 stop = 5 computes statistics 5th event relational event sequence, based history consists events 1-4.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"aomstats — aomstats","text":"Stadtfeld, C., & Block, P. (2017). Interactions, actors, time: Dynamic network actor models relational events. Sociological Science, 4, 318–352. doi:10.15195/v4.a14","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/aomstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aomstats — aomstats","text":"","code":"library(remstats)  # Load the data data(history) data(info)  # Prepare the data reh <- remify::remify(edgelist = history, model = \"actor\")  # Define the sender effects seff <- ~ send(\"extraversion\")  # Define the receiver_effects reff <- ~ receive(\"agreeableness\") + inertia() + otp()  # Compute the statistics aomstats(   reh = reh, sender_effects = seff, receiver_effects = reff,   attr_actors = info ) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: send_extraversion #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 3 statistics #> \t >> Statistics: #> \t \t >>> 1: receive_agreeableness #> \t \t >>> 2: inertia #> \t \t >>> 3: otp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/average.html","id":null,"dir":"Reference","previous_headings":"","what":"average — average","title":"average — average","text":"Specifies statistic \"average\" effect tie-oriented model receiver choice step actor-oriented model. \"average\" effect refers exogenous actor attribute affects dyad (,j)'s rate interacting (tie-oriented model) actor j's probability chosen receiver event send active sender time t (actor-oriented model) based average values actors j attribute.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"average — average","text":"","code":"average(variable, attr_actors = NULL, scaling = c(\"none\", \"std\"), attr_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"average — average","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' scaling method scaling statistic. Default scale statistic. Alternatively, standardization statistic per time point can requested \"std\". attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/average.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"average — average","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/average.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"average — average","text":"statistic timepoint t dyad (,j) equal average values actor j attribute timepoint t. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/average.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"average — average","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ average(\"extraversion\") remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: average_extraversion  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: average_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"baseline — baseline","title":"baseline — baseline","text":"Specifies intercept tie-oriented model sender activity rate step actor-oriented model manner lm (see Details).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/baseline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"baseline — baseline","text":"baseline effect automatically specified tie-oriented model sender activity rate step actor-oriented model ordinal argument remstats, tomstats, aomstats set FALSE (default) automatically removed argument set TRUE. Alternatively, baseline effect can explicitly specified adding '1' equation explicitly removed adding '-1' equation. baseline effect refers baseline tendency interact. tie-oriented model, log-inverse estimated parameter translates average number observed events per time unit per dyad. actor-oriented model, log-inverse estimated parameter translates average number observed events per time unit per actor. statistic equal one dyads resp. actors riskset timepoints.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/baseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"baseline — baseline","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") remstats(reh = reh_tie, tie_effects = ~1) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 1 statistics #> > Statistics: #> \t >> 1: baseline  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = ~1) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/bind_remstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two or more remstats objects — bind_remstats","title":"Combine two or more remstats objects — bind_remstats","text":"Function bind number remstats objects one duplicated statistics combined object removed based name.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/bind_remstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two or more remstats objects — bind_remstats","text":"","code":"bind_remstats(...)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/bind_remstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two or more remstats objects — bind_remstats","text":"... number remstats objects. remstats objects must matching dimensions, except third dimension. Note duplicated statistics combined object removed based name.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/bind_remstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two or more remstats objects — bind_remstats","text":"statistics  array combined statistics, rows refer time points, columns refer potential relational event (.e., potential edges) risk set slices refer statistics","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/bind_remstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two or more remstats objects — bind_remstats","text":"","code":"library(remstats)  # Load the data data(history) data(info)  # Prepare the data reh <- remify::remify(edgelist = history, model = \"actor\")  # Obtain two different statistics objects effects1 <- ~ inertia():receive(\"extraversion\") + otp() stats1 <- remstats(receiver_effects = effects1, reh = reh, attr_actors = info) effects2 <- ~ reciprocity() stats2 <- remstats(receiver_effects = effects2, reh = reh, attr_actors = info)  # Bind the two statistics objects statsC <- bind_remstats(stats1, stats2)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Exogenous Dyad Attribute in Long Format: both_male_long — both_male_long","title":"Exogenous Dyad Attribute in Long Format: both_male_long — both_male_long","text":"data frame representing exogenous attributes dyads social network long format. row indicates whether dyad consists two male actors (sex=0) original matrix `info_both_male_wide`.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exogenous Dyad Attribute in Long Format: both_male_long — both_male_long","text":"","code":"data(both_male_long)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exogenous Dyad Attribute in Long Format: both_male_long — both_male_long","text":"data frame following columns: actor1 Numeric id first actor dyad. actor2 Numeric id second actor dyad. both_male Binary indicator (1 male-male dyads, 0 otherwise).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_long.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Exogenous Dyad Attribute in Long Format: both_male_long — both_male_long","text":"Simulated exogenous information actors social network.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exogenous Dyad Attribute in Long Format: both_male_long — both_male_long","text":"","code":"data(both_male_long) head(both_male_long) #>   actor1 actor2 both_male #> 1    101    101         1 #> 2    101    103         1 #> 3    101    104         1 #> 4    101    105         1 #> 5    101    107         1 #> 6    101    109         1"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Exogenous Dyad Attribute Matrix: both_male_wide — both_male_wide","title":"Exogenous Dyad Attribute Matrix: both_male_wide — both_male_wide","text":"matrix representing exogenous attributes dyads social network. matrix indicates whether dyad consists two male actors (sex=0). Rows columns correspond actor IDs, cells contain binary values (1 male-male dyads, 0 otherwise).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exogenous Dyad Attribute Matrix: both_male_wide — both_male_wide","text":"","code":"data(both_male_wide)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_wide.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exogenous Dyad Attribute Matrix: both_male_wide — both_male_wide","text":"square matrix dimensions equal number unique actors.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_wide.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Exogenous Dyad Attribute Matrix: both_male_wide — both_male_wide","text":"Simulated exogenous information actors social network.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/both_male_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exogenous Dyad Attribute Matrix: both_male_wide — both_male_wide","text":"","code":"data(both_male_wide) print(both_male_wide) #>     101 103 104 105 107 109 111 112 113 115 #> 101   1   1   1   1   1   1   0   1   1   1 #> 103   1   1   1   1   1   1   0   1   1   1 #> 104   1   1   1   1   1   1   0   1   1   1 #> 105   1   1   1   1   1   1   0   1   1   1 #> 107   1   1   1   1   1   1   0   1   1   1 #> 109   1   1   1   1   1   1   0   1   1   1 #> 111   0   0   0   0   0   0   0   0   0   0 #> 112   1   1   1   1   1   1   0   1   1   1 #> 113   1   1   1   1   1   1   0   1   1   1 #> 115   1   1   1   1   1   1   0   1   1   1"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.aomstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Relational Event Network Statistics — boxplot.aomstats","title":"Plotting Relational Event Network Statistics — boxplot.aomstats","text":"Generate boxplots specified effect aomstats object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.aomstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Relational Event Network Statistics — boxplot.aomstats","text":"","code":"# S3 method for class 'aomstats' boxplot(   x,   effect,   model,   by = \"timepoints\",   subset = NULL,   outliers = TRUE,   ... )"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.aomstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Relational Event Network Statistics — boxplot.aomstats","text":"x object class aomstats containing relational event network statistics. effect string specifying name effect 'x' integer indicating index effect plotted. model string indicating whether effect 'sender' model 'receiver' model. string indicating whether statistic plotted across 'timepoints' (default) 'actors'. subset optional vector specifying subset timepoints actors used plotting. Per default, maximum 20 unique timepoints actors plotted. outliers logical value specifying whether include outliers plot. ... additional arguments passed bxp().","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.aomstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting Relational Event Network Statistics — boxplot.aomstats","text":"function produces boxplots visually represent distribution specified effect relational event network, captured aomstats object. 'effect' parameter allows user choose specific effect visualization, either providing effect's name index within 'aomstats' object. 'model' parameter indicates whether respective effect 'sender' model 'receiver' model. '' parameter determines whether boxplots created across different 'timepoints' 'actors'. moment, 'actors' supported sender model. Additionally, optional 'subset' parameter allows user focus specific timepoints actors. 'subset' specified, default maximum 20 unique timepoints actors plotted. 'outliers' argument, set TRUE, includes representation outliers boxplots. set FALSE, outliers omitted visualization. boxplots based following summary statistics data: box middle represents interquartile range (IQR) first (Q1) third quartile (Q3), line inside box represents median. whiskers extend box minimum maximum values within 1.5 times IQR Q1 Q3. Outliers beyond whiskers plotted individually.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.aomstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Relational Event Network Statistics — boxplot.aomstats","text":"","code":"library(remstats) # Load data data(history) # Prepare data reh <- remify::remify(edgelist = history[,1:3], model = \"actor\") # Compute effects stats <- remstats(reh, sender_effects = ~ outdegreeSender()) # Plot the 'outdegreeSender' distribution for 20 timepoints boxplot(stats, effect = \"outdegreeSender\", model = \"sender\")  # Plot the 'inertia' distribution for all 10 actors boxplot(stats, effect = \"outdegreeSender\", model = \"sender\", by = \"actors\")"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.tomstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","title":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","text":"Generate boxplots specified effect tomstats object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.tomstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","text":"","code":"# S3 method for class 'tomstats' boxplot(x, effect, by = \"timepoints\", subset = NULL, outliers = TRUE, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.tomstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","text":"x object class tomstats containing relational event network statistics. effect character string specifying name effect 'x' integer indicating index effect plotted. string indicating whether statistic plotted across 'timepoints' (default) 'dyads'. subset optional vector specifying subset timepoints dyads used plotting. Per default, maximum 20 unique timepoints dyads plotted. outliers logical value specifying whether include outliers plot. ... Additional arguments passed bxp().","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.tomstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","text":"return value","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.tomstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","text":"function produces boxplots visually represent distribution specified effect relational event network, captured tomstats object. 'effect' parameter allows user choose specific effect visualization, either providing effect's name index within 'tomstats' object. '' parameter determines whether boxplots created across different 'timepoints' 'dyads'. Additionally, optional 'subset' parameter allows user focus specific timepoints dyads. 'subset' specified, default maximum 20 unique timepoints dyads plotted. 'outliers' argument, set TRUE, includes representation outliers boxplots. set FALSE, outliers omitted visualization. boxplots based following summary statistics data: box middle represents interquartile range (IQR) first (Q1) third quartile (Q3), line inside box represents median. whiskers extend box minimum maximum values within 1.5 times IQR Q1 Q3. Outliers beyond whiskers plotted individually.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/boxplot.tomstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Relational Event Network Statistics Distributions — boxplot.tomstats","text":"","code":"library(remstats) # Load data data(history) # Prepare data reh <- remify::remify(edgelist = history[,1:3], model = \"tie\") # Compute effects stats <- remstats(reh, tie_effects = ~ inertia()) # Plot the 'inertia' distribution for 20 timepoints boxplot(stats, effect = \"inertia\")  # Plot the 'inertia' distribution for 20 dyads boxplot(stats, effect = \"inertia\", by = \"dyads\")  # Plot the 'inertia' distribution for dyads 2:5 boxplot(stats, effect = \"inertia\", by = \"dyads\", subset = 2:5)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"degreeDiff — degreeDiff","title":"degreeDiff — degreeDiff","text":"Specifies statistic `degreeDiff` effect tie-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"degreeDiff — degreeDiff","text":"","code":"degreeDiff(scaling = c(\"none\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"degreeDiff — degreeDiff","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, standardization degree difference per time point can requested `std`. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"degreeDiff — degreeDiff","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeDiff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"degreeDiff — degreeDiff","text":"degreeDiff effect refers tendency dyads increase interaction rate absolute difference degree two actors pair increases. statistic timepoint t dyad (,j) equal difference following two values: number events timepoint t involved actor actor j, respectively. degreeDiff effect defined undirected events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeDiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"degreeDiff — degreeDiff","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ degreeDiff() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: degreeDiff"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMax.html","id":null,"dir":"Reference","previous_headings":"","what":"degreeMax — degreeMax","title":"degreeMax — degreeMax","text":"Specifies statistic `degreeMax` effect tie-oriented model undirected events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"degreeMax — degreeMax","text":"","code":"degreeMax(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"degreeMax — degreeMax","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts two times number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"degreeMax — degreeMax","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"degreeMax — degreeMax","text":"degreeMax effect refers tendency dyads increase interaction rate total degree active actor pair increases. statistic timepoint t dyad (,j) equal maximum following two values: number events timepoint t involved actor actor j, respectively. Note degreeMax effect defined undirected events. Optionally, scaling method can set scaling. scaling degree count total number past events, statistic refers fraction past events active actor involved . first time point, events previously occur, assumed every actor equally likely involved event statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"degreeMax — degreeMax","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ degreeMax() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: degreeMax"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMin.html","id":null,"dir":"Reference","previous_headings":"","what":"degreeMin — degreeMin","title":"degreeMin — degreeMin","text":"Specifies statistic `degreeMin` effect tie-oriented model undirected events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"degreeMin — degreeMin","text":"","code":"degreeMin(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"degreeMin — degreeMin","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts two times number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"degreeMin — degreeMin","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"degreeMin — degreeMin","text":"degreeMin effect refers tendency dyads increase interaction rate total degree least active actor pair increases. statistic timepoint t dyad (,j) equal minimum following two values: number events timepoint t involved actor actor j, respectively. Note degreeMin effect defined undirected events. Optionally, scaling method can set scaling. scaling degree count total number past events, statistic refers fraction past events least active actor involved . first time point, events previously occur, assumed every actor equally likely involved event statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/degreeMin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"degreeMin — degreeMin","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ degreeMin() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: degreeMin"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/difference.html","id":null,"dir":"Reference","previous_headings":"","what":"difference — difference","title":"difference — difference","text":"Specifies statistic \"difference\" effect tie-oriented model receiver choice step actor-oriented model. difference effect refers exogenous actor attribute affects dyad (,j)'s rate interacting (tie-oriented model) actor j's probability chosen receiver event send active sender time t (actor-oriented model) based difference values actors j attribute.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"difference — difference","text":"","code":"difference(   variable,   attr_actors = NULL,   scaling = c(\"none\", \"std\"),   absolute = TRUE,   attr_data )"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"difference — difference","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' scaling method scaling statistic. Default scale statistic. Alternatively, standardization statistic per time point can requested \"std\". absolute Logical value indicating whether difference values converted absolute difference (default TRUE). attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"difference — difference","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/difference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"difference — difference","text":"statistic timepoint t equal (absolute) difference values actor j attribute timepoint t. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"difference — difference","text":"","code":"# Example for tie-oriented model reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ difference(\"extraversion\", absolute = TRUE) remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: difference_extraversion  # Example for actor-oriented model reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: difference_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/event.html","id":null,"dir":"Reference","previous_headings":"","what":"event — event","title":"event — event","text":"Specifies statistic \"event\" effect tie-oriented model. \"event\" effect refers exogenous event attribute affects waiting time events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"event — event","text":"","code":"event(x, variableName = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"event — event","text":"x vector event attribute variableName optionally, string indicating variable name, used dimnames output statistics object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"event — event","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"event — event","text":"statistic timepoint t dyads risk set equal attribute event timepoint t.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"event — event","text":"","code":"# \\donttest{   reh_tie <- remify::remify(history, model = \"tie\")   data(history, package = \"remstats\")   history$work <- ifelse(history$setting == \"work\", 1, 0)   effects <- ~ event(x = history$work, variableName = \"setting_is_work\")   remstats(reh = reh_tie, tie_effects = effects) #> Error in FUN(X[[i]], ...): Length of vector 'x' in event() does not match number of events in edgelist # }"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/history.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated relational event history — history","title":"Simulated relational event history — history","text":"dataset containing small example relational event history. Data simulated.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated relational event history — history","text":"","code":"data(history)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/history.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated relational event history — history","text":"dataframe 115 rows 5 variables: time time event since onset observation (e.g., minutes) actor1 first actor involved event actor2 second actor involved event setting setting event weight intensity event (e.g., based duration)","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/history.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated relational event history — history","text":"Simulated relational event history actors social network.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated relational event history — history","text":"","code":"data(history)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeReceiver.html","id":null,"dir":"Reference","previous_headings":"","what":"indegreeReceiver — indegreeReceiver","title":"indegreeReceiver — indegreeReceiver","text":"Specifies statistic `indegreeReceiver` effect tie-oriented model receiver choice step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeReceiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"indegreeReceiver — indegreeReceiver","text":"","code":"indegreeReceiver(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeReceiver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"indegreeReceiver — indegreeReceiver","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeReceiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"indegreeReceiver — indegreeReceiver","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeReceiver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"indegreeReceiver — indegreeReceiver","text":"indegree receiver effect refers tendency actors receive events received past events. statistic timepoint t dyad (,j) (tie-oriented model) receiver j (actor-oriented model) equal number events received actor j timepoint t. Note 'indegreeReceiver' effect defined directed events. Optionally, scaling method can set scaling. scaling degree count total number past events, statistic refers fraction past events received actor j. first time point, events previously occur, assumed every actor equally likely receive message statistic set equal 1/ n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeReceiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"indegreeReceiver — indegreeReceiver","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ indegreeReceiver() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: indegreeReceiver  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: indegreeReceiver"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeSender.html","id":null,"dir":"Reference","previous_headings":"","what":"indegreeSender — indegreeSender","title":"indegreeSender — indegreeSender","text":"Specifies statistic `indegreeSender` effect tie-oriented model sender activity rate step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeSender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"indegreeSender — indegreeSender","text":"","code":"indegreeSender(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeSender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"indegreeSender — indegreeSender","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeSender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"indegreeSender — indegreeSender","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeSender.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"indegreeSender — indegreeSender","text":"indegree sender effect refers tendency actors send events received past events. statistic timepoint t dyad (,j) (tie-oriented model) sender (actor-oriented model) equal number events received actor timepoint t. Note 'indegreeSender' effect defined directed events. Optionally, scaling method can set scaling. scaling degree count total number past events, statistic refers fraction past events received actor . first time point, events previously occur, assumed every actor equally likely send message statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/indegreeSender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"indegreeSender — indegreeSender","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ indegreeSender() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: indegreeSender  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: indegreeSender"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/inertia.html","id":null,"dir":"Reference","previous_headings":"","what":"inertia — inertia","title":"inertia — inertia","text":"Specifies statistic inertia effect tie-oriented model receiver choice step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/inertia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inertia — inertia","text":"","code":"inertia(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/inertia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inertia — inertia","text":"scaling method scaling inertia statistic. Default scale statistic (scaling = \"none\"). Alternatively, statistics can scaled specifying 'prop', raw counts divided outdegree sender time t (see 'details') standardization raw counts per time point can requested 'std'. consider_type logical, indicates whether count number past events separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/inertia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"inertia — inertia","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/inertia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"inertia — inertia","text":"inertia effect refers tendency dyads repeatedly interact (tie-oriented model) actors repeatedly choose actor receiver events (actor-oriented model). statistic timepoint t dyad (,j) resp. receiver j equal number (,j) events timepoint t. Optionally, scaling method can set scaling. scaling inertia count outdegree sender (\"prop\"), statistic refers fraction messages send actor send actor j. actor send messages yet can assumed every actor equally likely receive message statistic set equal 1/(n-1), n refers number actors. resulting statistic similar \"FrPSndSnd\" statistic R package 'relevent', persistence statistic Section 2.2.2 Butts (2008). Note scaling method defined directed events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/inertia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"inertia — inertia","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ inertia() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: inertia  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: inertia"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/info.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated exogenous information on actors in a social network. — info","title":"Simulated exogenous information on actors in a social network. — info","text":"dataset containing exogenous information actors social network relational event history. Data simulated.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated exogenous information on actors in a social network. — info","text":"","code":"data(info)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated exogenous information on actors in a social network. — info","text":"dataframe 10 rows 5 variables: id numeric id actor time numeric value, describes value covariate   changes, changes age dichotomized age actor (e.g., 0 = 25, 1 = 25   older) sex dichotomized sex actor (e.g., 0 = male, 1 = female) extraversion standardized extraversion score actor agreeableness standardized agreeableness score actor","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/info.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated exogenous information on actors in a social network. — info","text":"Simulated exogenous information actors social network.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated exogenous information on actors in a social network. — info","text":"","code":"data(info)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":null,"dir":"Reference","previous_headings":"","what":"isp — isp","title":"isp — isp","text":"Specifies statistic incoming shared partners effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"isp — isp","text":"","code":"isp(unique = FALSE, scaling = c(\"none\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"isp — isp","text":"unique logical value indicating whether sum minimum events third actors (FALSE, default) number third actors create new, unique shared partner (TRUE). See details information. scaling method scaling triad statistic. Default scale statistic keep raw 'counts'. Alternatively, standardization raw counts per time point can requested 'std'. consider_type logical, indicates whether count shared partners separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"isp — isp","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"isp — isp","text":"incoming shared partners effect describes propensity dyads interact based number past incoming shared partners . default, statistic timepoint t dyad (,j) computed sum minimum occurrences past (h,) (h,j) events across actors h. unique parameter set TRUE, different approach taken. case, statistic counts number actors h contribute creation new, distinct shared partner actors j. Additionally, possible specify scaling method using scaling parameter. Please note incoming shared partners effect, 'isp', exclusively defined directed events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"isp — isp","text":"Butts, C. (2008). relational event framework social action. Sociological Methodology.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/isp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"isp — isp","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ isp() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: isp  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: isp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":null,"dir":"Reference","previous_headings":"","what":"itp — itp","title":"itp — itp","text":"Specifies statistic incoming two-path effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"itp — itp","text":"","code":"itp(unique = FALSE, scaling = c(\"none\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"itp — itp","text":"unique logical value indicating whether sum minimum events third actors (FALSE, default) number third actors create new, unique two-path (TRUE). See details information. scaling method scaling triad statistic. default value \"none\", means statistic scaled. Alternatively, can set \"std\" request standardization raw counts per time point. consider_type logical value indicating whether count two-paths separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"itp — itp","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"itp — itp","text":"incoming two-path effect describes propensity dyads interact based number past incoming two-paths . default, statistic timepoint t dyad (,j) computed sum minimum occurrences past (j,h) (h,) events across actors h. unique parameter set TRUE, different approach taken. case, statistic counts number actors h contribute creation new, distinct two-path actors j. Additionally, possible specify scaling method using scaling parameter. Please note incoming two-path effect, 'itp', exclusively defined directed events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"itp — itp","text":"Butts, C. (2008). relational event framework social action. Sociological Methodology.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/itp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"itp — itp","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ itp() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: itp  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: itp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/maximum.html","id":null,"dir":"Reference","previous_headings":"","what":"maximum — maximum","title":"maximum — maximum","text":"Specifies statistic \"maximum\" effect tie-oriented model. \"maximum\" effect refers exogenous actor attribute affects dyad (,j)'s rate interacting based maximum values actors j attribute.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/maximum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"maximum — maximum","text":"","code":"maximum(variable, attr_actors = NULL, scaling = c(\"none\", \"std\"), attr_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/maximum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"maximum — maximum","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' scaling method scaling statistic. Default scale statistic. Alternatively, standardization statistic per time point can requested \"std\". attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/maximum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"maximum — maximum","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/maximum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"maximum — maximum","text":"statistic timepoint t dyad (,j) equal maximum values actor j attribute timepoint t. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/maximum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"maximum — maximum","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ maximum(\"extraversion\") remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: maximum_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/minimum.html","id":null,"dir":"Reference","previous_headings":"","what":"minimum — minimum","title":"minimum — minimum","text":"Specifies statistic \"minimum\" effect tie-oriented model. \"minimum\" effect refers exogenous actor attribute affects dyad (,j)'s rate interacting based minimum values actors j attribute.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/minimum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minimum — minimum","text":"","code":"minimum(variable, attr_actors = NULL, scaling = c(\"none\", \"std\"), attr_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/minimum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"minimum — minimum","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' scaling method scaling statistic. Default scale statistic. Alternatively, standardization statistic per time point can requested \"std\". attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/minimum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"minimum — minimum","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/minimum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"minimum — minimum","text":"statistic timepoint t dyad (,j) equal minimum values actor j attribute timepoint t. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/minimum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"minimum — minimum","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ minimum(\"extraversion\") remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: minimum_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":null,"dir":"Reference","previous_headings":"","what":"osp — osp","title":"osp — osp","text":"Specifies statistic outgoing shared partners effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"osp — osp","text":"","code":"osp(unique = FALSE, scaling = c(\"none\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"osp — osp","text":"unique logical value indicating whether sum minimum events third actors (FALSE, default) number third actors create new, unique shared partner (TRUE). See details information. scaling method scaling triad statistic. Default scale statistic keep raw 'counts'. Alternatively, standardization raw counts per time point can requested 'std'. consider_type logical, indicates whether count shared partners separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"osp — osp","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"osp — osp","text":"outgoing shared partners effect describes propensity dyads interact based number past outgoing shared partners . default, statistic timepoint t dyad (,j) computed sum minimum occurrences past (,h) (j,h) events across actors h. unique parameter set TRUE, different approach taken. case, statistic counts number actors h contribute creation new, distinct shared partner actors j. Additionally, possible specify scaling method using scaling parameter. Please note outgoing shared partners effect, 'osp', exclusively defined directed events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"osp — osp","text":"Butts, C. (2008). relational event framework social action. Sociological Methodology.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/osp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"osp — osp","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ osp() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: osp  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: osp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":null,"dir":"Reference","previous_headings":"","what":"otp — otp","title":"otp — otp","text":"Specifies statistic outgoing two-path effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"otp — otp","text":"","code":"otp(unique = FALSE, scaling = c(\"none\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"otp — otp","text":"unique logical value indicating whether sum minimum events third actors (FALSE, default) number third actors create new, unique two-path (TRUE). See details information. scaling method scaling triad statistic. default value \"none\", means statistic scaled. Alternatively, can set \"std\" request standardization raw counts per time point. consider_type logical value indicating whether count two-paths separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"otp — otp","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"otp — otp","text":"outgoing two-path effect describes propensity dyads interact based number past outgoing two-paths . default, statistic timepoint t dyad (,j) computed sum minimum occurrences past (,h) (h,j) events across actors h. unique parameter set TRUE, different approach taken. case, statistic counts number actors h contribute creation new, distinct two-path actors j. Additionally, possible specify scaling method using scaling parameter. Please note outgoing two-path effect, 'otp', exclusively defined directed events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"otp — otp","text":"Butts, C. (2008). relational event framework social action. Sociological Methodology.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/otp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"otp — otp","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ otp() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: otp  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: otp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeReceiver.html","id":null,"dir":"Reference","previous_headings":"","what":"outdegreeReceiver — outdegreeReceiver","title":"outdegreeReceiver — outdegreeReceiver","text":"Specifies statistic `outdegreeReceiver` effect tie-oriented model receiver choice step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeReceiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"outdegreeReceiver — outdegreeReceiver","text":"","code":"outdegreeReceiver(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeReceiver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"outdegreeReceiver — outdegreeReceiver","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeReceiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"outdegreeReceiver — outdegreeReceiver","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeReceiver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"outdegreeReceiver — outdegreeReceiver","text":"outdegree receiver effect refers tendency actors receive events send past events. statistic timepoint t dyad (,j) (tie-oriented model) receiver j (actor-oriented model) equal number events send actor j timepoint t. Note 'outdegreeReceiver' effect defined directed events. Optionally, scaling method can set scaling. scaling degree count total number past events, statistic refers fraction past events send actor j. first time point, events previously occur, assumed every actor equally likely receive message statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeReceiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"outdegreeReceiver — outdegreeReceiver","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ outdegreeReceiver() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: outdegreeReceiver  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: outdegreeReceiver"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeSender.html","id":null,"dir":"Reference","previous_headings":"","what":"outdegreeSender — outdegreeSender","title":"outdegreeSender — outdegreeSender","text":"Specifies statistic `outdegreeSender` effect tie-oriented model sender activity rate step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeSender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"outdegreeSender — outdegreeSender","text":"","code":"outdegreeSender(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeSender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"outdegreeSender — outdegreeSender","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeSender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"outdegreeSender — outdegreeSender","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeSender.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"outdegreeSender — outdegreeSender","text":"outdegree sender effect refers tendency actors send events send past events. statistic timepoint t dyad (,j) (tie-oriented model) sender (actor-oriented model) equal number events send actor timepoint t. Note 'outdegreeSender' effect defined directed events. Optionally, scaling method can set scaling. scaling degree count total number past events, statistic refers fraction past events send actor . first time point, events previously occur, assumed every actor equally likely send message statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/outdegreeSender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"outdegreeSender — outdegreeSender","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ outdegreeSender() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: outdegreeSender  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: outdegreeSender"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.aomstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Relational Event Network Statistics Trajectories — plot.aomstats","title":"Plotting Relational Event Network Statistics Trajectories — plot.aomstats","text":"Generate line plots visualize trajectories specified effect sender model aomstats object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.aomstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Relational Event Network Statistics Trajectories — plot.aomstats","text":"","code":"# S3 method for class 'aomstats' plot(x, effect, subset = NULL, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.aomstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Relational Event Network Statistics Trajectories — plot.aomstats","text":"x object class aomstats containing relational event network statistics. effect character string specifying name effect 'x' integer indicating index effect plotted. subset optional vector specifying subset actors used plotting. default, maximum 5 unique actors used plotting. ... Additional arguments passed plot().","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.aomstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting Relational Event Network Statistics Trajectories — plot.aomstats","text":"function creates line plots illustrate temporal trajectories specified effect relational event network, captured sender model aomstats object. 'effect' parameter allows users choose specific effect visualization, either providing effect's name index within 'aomstats' object. optional 'subset' parameter enables users focus specific actors. 'subset' specified, default maximum 5 unique actors plotted. actors randomly selected represent trajectories across range different endpoints effect (excluding zero).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.aomstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Relational Event Network Statistics Trajectories — plot.aomstats","text":"","code":"library(remstats) # Load data data(history) # Prepare data reh <- remify::remify(edgelist = history[,1:3], model = \"actor\") # Compute effects stats <- remstats(reh, sender_effects = ~ outdegreeSender()) # Plot the 'outdegreeSender' trajectories 5 actors plot(stats, effect = \"outdegreeSender\")  # Plot the 'outdegreeSender' trajectory for a specific actor plot(stats, effect = \"outdegreeSender\", subset = 10)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.tomstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Relational Event Network Statistics Trajectories — plot.tomstats","title":"Plotting Relational Event Network Statistics Trajectories — plot.tomstats","text":"Generate line plots visualize trajectories specified effect tomstats object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.tomstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Relational Event Network Statistics Trajectories — plot.tomstats","text":"","code":"# S3 method for class 'tomstats' plot(x, effect, subset = NULL, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.tomstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Relational Event Network Statistics Trajectories — plot.tomstats","text":"x object class tomstats containing relational event network statistics. effect character string specifying name effect 'x' integer indicating index effect plotted. subset optional vector specifying subset dyads used plotting. default, maximum 5 unique dyads used plotting. ... Additional arguments passed plot().","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.tomstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting Relational Event Network Statistics Trajectories — plot.tomstats","text":"function creates line plots illustrate temporal trajectories specified effect relational event network, captured tomstats object. 'effect' parameter allows users choose specific effect visualization, either providing effect's name index within 'tomstats' object. optional 'subset' parameter enables users focus specific dyads. 'subset' specified, default maximum 5 unique dyads plotted. dyads randomly selected represent trajectories across range different endpoints effect (excluding zero).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/plot.tomstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Relational Event Network Statistics Trajectories — plot.tomstats","text":"","code":"library(remstats) # Load data data(history) # Prepare data reh <- remify::remify(edgelist = history[,1:3], model = \"tie\") # Compute effects stats <- remstats(reh, tie_effects = ~ inertia()) # Plot the 'inertia' trajectories for 5 dyads plot(stats, effect = \"inertia\")  # Plot the 'inertia' trajectory for a specific dyad plot(stats, effect = \"inertia\", subset = 60)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/print.remstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing Relational Event Network Statistics — print.remstats","title":"Printing Relational Event Network Statistics — print.remstats","text":"Print remstats object user-friendly format.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/print.remstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing Relational Event Network Statistics — print.remstats","text":"","code":"# S3 method for class 'remstats' print(x, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/print.remstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing Relational Event Network Statistics — print.remstats","text":"x object class remstats. ... arguments passed methods.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/print.remstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing Relational Event Network Statistics — print.remstats","text":"function prints formatted information remstats object console, presenting details relational event network statistics user-friendly format.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/print.remstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing Relational Event Network Statistics — print.remstats","text":"","code":"rehObject <- remify::remify(edgelist = history, model = \"tie\") remstatsObject <- remstats::remstats(reh = rehObject, tie_effects = ~ remstats::inertia()) print(remstatsObject) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: inertia  rehObject <- remify::remify(edgelist = history, model = \"actor\") remstatsObject <- remstats::remstats(reh = rehObject, receiver_effects = ~ inertia()) print(remstatsObject) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: inertia"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABA.html","id":null,"dir":"Reference","previous_headings":"","what":"psABA — psABA","title":"psABA — psABA","text":"Specifies statistic participation shift AB-sender step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABA — psABA","text":"","code":"psABA()"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABA — psABA","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABA — psABA","text":"Refers tendency actor keep initiating events: next sender equal previous sender. timepoint t, psABA statistic equal one actor create participation shift occur edgelist sender time t equal zero actors create participation shift. multiple events edgelist occur time point, order events determines whether p-shift observed.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABA — psABA","text":"","code":"reh_actor <- remify::remify(history, model = \"actor\") remstats(sender_effects = ~ psABA(), reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: psABA"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAB.html","id":null,"dir":"Reference","previous_headings":"","what":"psABAB — psABAB","title":"psABAB — psABAB","text":"Specifies statistic pshift AB-AB effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABAB — psABAB","text":"","code":"psABAB(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABAB — psABAB","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABAB — psABAB","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABAB — psABAB","text":"Refers tendency dyads keep interacting. directed events, next sender receiver equal previous sender receiver. undirected events, next actor pair equal current actor pair. timepoint t, psABAB statistic equal one dyads create participation shift occur edgelist time t equal zero dyads create participation shift. consider_type set TRUE, type two subsequent AB events equal. set FALSE, participation shift set one every AB event, regardless event type. multiple events edgelist occur time point, order events determines whether p-shift observed.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABAB — psABAB","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ psABAB() remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABAB"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAY.html","id":null,"dir":"Reference","previous_headings":"","what":"psABAY — psABAY","title":"psABAY — psABAY","text":"Specifies statistic participation shift AB-AY.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABAY — psABAY","text":"","code":"psABAY(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABAY — psABAY","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABAY — psABAY","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABAY — psABAY","text":"One Gibson's (2003) dyadic participation shifts. AB-AY participation shift refers tendency turn continuing. directed events, sender () current event sender previous event (), receiver (Y) different previous receiver (B). undirected events, one current actors () matches one actors previous events (B), actor (Y) different. identify shifts, statistic 'psABAY' calculated pair actors given timepoint (t). pair's interaction follows AB-AY pattern, statistic set equal one; otherwise, set zero. Additionally, types AB AY events can taken account. 'consider_type' 'TRUE', type AB event type AY event must match shift occur. 'consider_type' 'FALSE', shift happens every AY event, regardless event type.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABAY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABAY — psABAY","text":"","code":"reh <- remify::remify(history, model = \"tie\") effects <- ~ psABAY() remstats(reh = reh, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABAY"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABB.html","id":null,"dir":"Reference","previous_headings":"","what":"psABB — psABB","title":"psABB — psABB","text":"Specifies statistic participation shift AB-B sender step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABB — psABB","text":"","code":"psABB()"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABB — psABB","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABB — psABB","text":"AB-B participation shift refers tendency immediate reciprocation (next sender previous receiver). timepoint t, psABBA statistic equal one actor (.e, previous event receiver) create participation shift occur sender edgelist time t equal zero actors create participation shift. multiple events edgelist occur time point, order events determines whether p-shift observed.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABB — psABB","text":"","code":"reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = ~ psABB()) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: psABB"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBA.html","id":null,"dir":"Reference","previous_headings":"","what":"psABBA — psABBA","title":"psABBA — psABBA","text":"Specifies statistic participation shift AB-BA.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABBA — psABBA","text":"","code":"psABBA(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABBA — psABBA","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABBA — psABBA","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABBA — psABBA","text":"AB-BA pshift effect refers one Gibson's (2003) dyadic participation shifts. AB-BA pshift refers tendency immediate reciprocation (next sender previous receiver next receiver previous sender). timepoint t, psABBA statistic equal one dyad create participation shift occur edgelist time t equal zero dyads create participation shift. consider_type set TRUE, type AB event type BA event equal. set FALSE, participation shift set one every BA event, regardless event type. multiple events edgelist occur time point, order events determines whether p-shift observed. Note AB-BA pshift defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABBA — psABBA","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ psABBA() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABBA"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBY.html","id":null,"dir":"Reference","previous_headings":"","what":"psABBY — psABBY","title":"psABBY — psABBY","text":"Specifies statistic participation shift AB-.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABBY — psABBY","text":"","code":"psABBY(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABBY — psABBY","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABBY — psABBY","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABBY — psABBY","text":"AB-participation shift refers one Gibson's (2003) dyadic participation shifts. AB-pshift refers tendency turn receiving (, next sender previous receiver next receiver current previous). timepoint t, psABBY statistic equal one dyads create participation shift occur edgelist time t equal zero dyads create participation shift. consider_type set TRUE, type AB event type events equal. set FALSE, participation shift set one every event, regardless event type. multiple events edgelist occur time point, order events determines whether p-shift observed. Note AB-pshift defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABBY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABBY — psABBY","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ psABBY() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABBY"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABX.html","id":null,"dir":"Reference","previous_headings":"","what":"psABX — psABX","title":"psABX — psABX","text":"Specifies statistic participation shift AB-X sender step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABX — psABX","text":"","code":"psABX()"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABX — psABX","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABX — psABX","text":"AB-X participation shift refers tendency turn usurping (, next sender previous event). timepoint t, psABX statistic equal one actors create participation shift occur sender edgelist time t equal zero actors create participation shift. multiple events edgelist occur time point, order events determines whether p-shift observed.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABX.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABX — psABX","text":"","code":"reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = ~ psABX()) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: psABX"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXA.html","id":null,"dir":"Reference","previous_headings":"","what":"psABXA — psABXA","title":"psABXA — psABXA","text":"Specifies statistic participation shift AB-XA.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABXA — psABXA","text":"","code":"psABXA(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABXA — psABXA","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABXA — psABXA","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABXA — psABXA","text":"AB-XA participation shift refers one Gibson's (2003) dyadic participation shifts. AB-XA pshift refers tendency turn usurping (, next sender previous event next receiver previous sender). timepoint t, psABXA statistic equal one dyads create participation shift occur edgelist time t equal zero dyads create participation shift. consider_type set TRUE, type AB event type XA events equal. set FALSE, participation shift set one every XA event, regardless event type. multiple events edgelist occur time point, order events determines whether pshift observed. Note AB-XA pshift defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABXA — psABXA","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ psABXA() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABXA"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXB.html","id":null,"dir":"Reference","previous_headings":"","what":"psABXB — psABXB","title":"psABXB — psABXB","text":"Specifies statistic participation shift AB-XB.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABXB — psABXB","text":"","code":"psABXB(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABXB — psABXB","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABXB — psABXB","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABXB — psABXB","text":"AB-XB participation shift refers one Gibson's (2003) dyadic participation shifts. AB-XB pshift refers tendency turn usurping (, next sender previous event next receiver previous receiver). timepoint t, psABXB statistic equal one dyads create participation shift occur edgelist time t equal zero dyads create participation shift. consider_type set TRUE, type AB event type XB events equal. set FALSE, participation shift set one every XB event, regardless event type. multiple events edgelist occur time point, order events determines whether p-shift observed. Note AB-XB pshift defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABXB — psABXB","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ psABXB() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABXB"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXY.html","id":null,"dir":"Reference","previous_headings":"","what":"psABXY — psABXY","title":"psABXY — psABXY","text":"Specifies statistic participation shift AB-XY.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"psABXY — psABXY","text":"","code":"psABXY(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"psABXY — psABXY","text":"consider_type logical, indicates whether consider event type determining dyads create pshift (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"psABXY — psABXY","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"psABXY — psABXY","text":"AB-XY participation shift refers one Gibson's (2003) dyadic participation shifts. AB-XY pshift refers tendency turn usurping (, next sender next receiver previous event). timepoint t, psABXY statistic equal one dyads create participation shift occur edgelist time t equal zero dyads create participation shift. consider_type set TRUE, type AB event type XY events equal. set FALSE, participation shift set one every XY event, regardless event type. multiple events edgelist occur time point, order events determines whether p-shift observed. Note AB-XY pshift defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/psABXY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"psABXY — psABXY","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ psABXY() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: psABXY"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/receive.html","id":null,"dir":"Reference","previous_headings":"","what":"receive — receive","title":"receive — receive","text":"Specifies statistic \"receive\" effect tie-oriented model receiver choice step actor-oriented model. \"receive\" effect refers exogenous actor attribute affects actor 's rate receiving events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/receive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"receive — receive","text":"","code":"receive(variable, attr_actors = NULL, scaling = c(\"none\", \"std\"), attr_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/receive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"receive — receive","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' scaling method scaling statistic. Default scale statistic. Alternatively, standardization statistic per time point can requested \"std\". attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/receive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"receive — receive","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/receive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"receive — receive","text":"statistic timepoint t equal value exogenous attribute actor time t dyads riskset actor receiver. Note \"receive\" effect defined directed relational events. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/receive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"receive — receive","text":"","code":"data(history) data(info)  # Tie-oriented model reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ receive(\"extraversion\") remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: receive_extraversion  # Actor-oriented model reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: receive_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyContinue.html","id":null,"dir":"Reference","previous_headings":"","what":"recencyContinue — recencyContinue","title":"recencyContinue — recencyContinue","text":"Specifies statistic recency continue effect effects argument tomstats receiver_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyContinue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recencyContinue — recencyContinue","text":"","code":"recencyContinue(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyContinue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recencyContinue — recencyContinue","text":"consider_type logical, indicates whether compute recency separately event type (TRUE, default) regardless event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyContinue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recencyContinue — recencyContinue","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyContinue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"recencyContinue — recencyContinue","text":"recencyContinue effect refers recency statistic similar described Vu et al. (2017) Mulder Leenders (2019). timepoint t, directed dyad (,j) statistic equal 1/(time past since dyad last active + 1).","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyContinue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"recencyContinue — recencyContinue","text":"","code":"effects <- ~ recencyContinue() reh_tie <- remify::remify(history, model = \"tie\") remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: recencyContinue  reh_actor <- remify::remify(history, model = \"actor\") remstats(receiver_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: recencyContinue"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveReceiver.html","id":null,"dir":"Reference","previous_headings":"","what":"recencyReceiveReceiver — recencyReceiveReceiver","title":"recencyReceiveReceiver — recencyReceiveReceiver","text":"Specifies statistic recency receive receiver effect effects argument tomstats receiver_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveReceiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recencyReceiveReceiver — recencyReceiveReceiver","text":"","code":"recencyReceiveReceiver(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveReceiver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recencyReceiveReceiver — recencyReceiveReceiver","text":"consider_type logical, indicates whether compute recency separately event type (TRUE, default) regardless event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveReceiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recencyReceiveReceiver — recencyReceiveReceiver","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveReceiver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"recencyReceiveReceiver — recencyReceiveReceiver","text":"recencyReceiveReceiver effect refers recency statistic similar described Vu et al. (2017) Mulder Leenders (2019). timepoint t, directed dyad (,j) statistic equal 1/(time past since receiver j last active receiver + 1). Note 'recencyReceiveReceiver' effect defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveReceiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"recencyReceiveReceiver — recencyReceiveReceiver","text":"","code":"effects <- ~ recencyReceiveReceiver() reh_tie <- remify::remify(history, model = \"tie\") remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: recencyReceiveReceiver  reh_actor <- remify::remify(history, model = \"actor\") remstats(receiver_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: recencyReceiveReceiver"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveSender.html","id":null,"dir":"Reference","previous_headings":"","what":"recencyReceiveSender — recencyReceiveSender","title":"recencyReceiveSender — recencyReceiveSender","text":"Specifies statistic recency receive sender effect effects argument tomstats sender_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveSender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recencyReceiveSender — recencyReceiveSender","text":"","code":"recencyReceiveSender(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveSender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recencyReceiveSender — recencyReceiveSender","text":"consider_type logical, indicates whether compute recency separately event type (TRUE, default) regardless event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveSender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recencyReceiveSender — recencyReceiveSender","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveSender.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"recencyReceiveSender — recencyReceiveSender","text":"recencyReceiveSender effect refers recency statistic similar described Vu et al. (2017) Mulder Leenders (2019). timepoint t, directed dyad (,j) statistic equal 1/(time past since sender last active receiver + 1). Note 'recencyReceiveSender' effect defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencyReceiveSender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"recencyReceiveSender — recencyReceiveSender","text":"","code":"effects <- ~ recencyReceiveSender() reh_tie <- remify::remify(history, model = \"tie\") remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: recencyReceiveSender  reh_actor <- remify::remify(history, model = \"actor\") remstats(sender_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: recencyReceiveSender"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendReceiver.html","id":null,"dir":"Reference","previous_headings":"","what":"recencySendReceiver — recencySendReceiver","title":"recencySendReceiver — recencySendReceiver","text":"Specifies statistic recency send receiver effect effects argument tomstats receiver_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendReceiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recencySendReceiver — recencySendReceiver","text":"","code":"recencySendReceiver(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendReceiver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recencySendReceiver — recencySendReceiver","text":"consider_type logical, indicates whether compute recency separately event type (TRUE, default) regardless event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendReceiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recencySendReceiver — recencySendReceiver","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendReceiver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"recencySendReceiver — recencySendReceiver","text":"recencySendReceiver effect refers recency statistic similar described Vu et al. (2017) Mulder Leenders (2019). timepoint t, directed dyad (,j) statistic equal 1/(time past since receiver j last active sender + 1). Note 'recencySendReceiver' effect defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendReceiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"recencySendReceiver — recencySendReceiver","text":"","code":"effects <- ~ recencySendReceiver() reh_tie <- remify::remify(history, model = \"tie\") remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: recencySendReceiver  reh_actor <- remify::remify(history, model = \"actor\") remstats(receiver_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: recencySendReceiver"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendSender.html","id":null,"dir":"Reference","previous_headings":"","what":"recencySendSender — recencySendSender","title":"recencySendSender — recencySendSender","text":"Specifies statistic recency send sender effect effects argument tomstats sender_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendSender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"recencySendSender — recencySendSender","text":"","code":"recencySendSender(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendSender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"recencySendSender — recencySendSender","text":"consider_type logical, indicates whether compute recency separately event type (TRUE, default) regardless event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendSender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recencySendSender — recencySendSender","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendSender.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"recencySendSender — recencySendSender","text":"recencySendSender effect refers recency statistic similar described Vu et al. (2017) Mulder Leenders (2019). timepoint t, directed dyad (,j) statistic equal 1/(time past since sender last active sender + 1). Note 'recencySendSender' effect defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/recencySendSender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"recencySendSender — recencySendSender","text":"","code":"effects <- ~ recencySendSender() reh_tie <- remify::remify(history, model = \"tie\") remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: recencySendSender  reh_actor <- remify::remify(history, model = \"actor\") remstats(sender_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: recencySendSender"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/reciprocity.html","id":null,"dir":"Reference","previous_headings":"","what":"reciprocity — reciprocity","title":"reciprocity — reciprocity","text":"Specifies statistic reciprocity effect tie-oriented model receiver choice step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/reciprocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reciprocity — reciprocity","text":"","code":"reciprocity(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/reciprocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reciprocity — reciprocity","text":"scaling method scaling reciprocity statistic. Default scale statistic keep raw 'counts'. Alternatively, statistics can scaled 'prop', raw counts divided indegree sender time t (see 'details') standardization raw counts per time point can requested 'std'. consider_type logical, indicates whether count number past reciprocal events separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/reciprocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reciprocity — reciprocity","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/reciprocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reciprocity — reciprocity","text":"reciprocity effect refers tendency actors reciprocate past interactions. statistic timepoint t dyad (,j) (tie-oriented model) receiver j (actor-oriented model) equal number (j,) events timepoint t. Note reciprocity effect defined directed events. Optionally, scaling method can set scaling.  scaling reciprocity count indegree sender, statistic refers fraction messages received actor received actor j. actor received messages yet can assumed actor equally likely receive message every actor statistic set equal 1/(n-1), n refers number actors. resulting statistic similar \"FrRecSnd\" statistic R package 'relevent'.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/reciprocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reciprocity — reciprocity","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ reciprocity() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: reciprocity  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: reciprocity"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":null,"dir":"Reference","previous_headings":"","what":"remstats — remstats","title":"remstats — remstats","text":"Computes statistics modeling relational events tie-oriented actor-oriented approach.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remstats — remstats","text":"","code":"remstats(   reh,   tie_effects = NULL,   sender_effects = NULL,   receiver_effects = NULL,   attr_actors = NULL,   attr_dyads = NULL,   method = c(\"pt\", \"pe\"),   memory = c(\"full\", \"window\", \"decay\", \"interval\"),   memory_value = NA,   start = 1,   stop = Inf,   display_progress = FALSE,   adjmat = NULL,   get_adjmat = FALSE,   attr_data,   attributes,   edgelist )"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remstats — remstats","text":"reh object class \"remify\" characterizing relational event history. tie_effects object class \"formula\" (one can coerced class): symbolic description effects tie-oriented model statistics computed, see 'Details' available effects corresponding statistics sender_effects object class \"formula\" (one can coerced class): symbolic description effects sender activity rate step actor-oriented model statistics computed, see `Details' receiver_effects object class \"formula\" (one can coerced class): symbolic description effects receiver choice step model statistics computed, see `Details' attr_actors optionally, object class \"data.frame\" contains exogenous attributes actors (see Details). attr_dyads optionally, object class data.frame matrix containing attribute information dyads (see Details). method Specifies method managing simultaneous events, .e., events occurring time. default 'method' 'pt' (per timepoint), statistics computed unique timepoint edgelist. Alternatively, can choose 'pe' (per event), statistics computed unique event observed edgelist. memory memory used. See `Details'. memory_value Numeric value indicating memory parameter. See `Details'. start optional integer value, specifying index first time event relational event history statistics must computed (see 'Details') stop optional integer value, specifying index last time event relational event history statistics must computed (see 'Details') display_progress progress bar computation endogenous statistics shown (TRUE) (FALSE)? adjmat optionally, tie-oriented model previously computed adjacency matrix rows time points columns risk set entries get_adjmat tie-oriented model, whether adjmat computed remstats outputted attribute statistics. attr_data deprecated, please use \"attr_actors\" instead attributes deprecated, please use \"attr_data\" instead edgelist deprecated, please use \"reh\" instead","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remstats — remstats","text":"object class 'remstats'. case tie-oriented model, array computed statistics, rows refer time points, columns refer potential relational event (.e., potential edges) risk set slices refer statistics. case actor-oriented model, list first element statistics sender activity rate step second element statistics receiver choice step, rows refer time points, columns refer potential senders receivers, respectively. 'remstats' object following attributes: model Type model estimated, obtained      remify object inputted 'reh'. formula Model formula, obtained formula inputted      'tie_effects', 'sender_effects' /'receiver_effects', depending      model. riskset tie-oriented model, risk set used      construct statistics. actors actor-oriented model, set actors      used construct statistics, obtained remify object      inputted 'reh'. adjmat [Optional], tie-oriented model,      \"get_adjmat = TRUE\", matrix accumulated event weights      time point (rows) dyad (columns).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"effects","dir":"Reference","previous_headings":"","what":"Effects","title":"remstats — remstats","text":"statistics computed defined symbolically supplied tie_effects (tie-oriented model), sender_effects /receiver_effects (actor-oriented model) argument form ~ effects. terms separated + operators. example: effects = ~ inertia() + otp(). Interactions two effects can included * : operators. example: effects = ~ inertia():otp(). list available effects can obtained tie_effects() actor_effects(). majority statistics can scaled way, see documentation scaling argument separate effect functions information . majority statistics can account event type included dependent variable, see documentation consider_type argument separate effect functions information . Note option available tie-oriented model. Note events relational event history can directed undirected. statistics defined either directed undirected events (see documentation statistics). Note undirected events available tie-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"attr-actors","dir":"Reference","previous_headings":"","what":"attr_actors","title":"remstats — remstats","text":"computation exogenous statistics attributes object exogenous covariate information supplied attr_actors argument either remstats() separate effect functions supplied ..._effects arguments (e.g., see send). attr_actors object constructed follows: dataframe rows referring attribute value actor timepoint t. `name` column required contains actor name (corresponding actor names relational event history). `time` column required contains time attributes change (set zero none attributes vary time). Subsequent columns contain attributes called specifications exogenous statistics (column name corresponding string supplied variable argument effect function). Note procedure exogenous effects `tie' `event' deviates , exogenous covariate information specified different way, see tie event.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"attr-dyads","dir":"Reference","previous_headings":"","what":"attr_dyads","title":"remstats — remstats","text":"computation dyad exogenous statistics tie(), attributes object exogenous covariates information per dyad supplied. data.frame matrix containing attribute information dyads. attr_dyads data.frame, first two columns represent \"actor1\" \"actor2\" (directed events, \"actor1\" corresponds sender, \"actor2\" corresponds receiver). Additional columns can represent dyads' exogenous attributes. attributes vary time, include column named \"time\". attr_dyads matrix, rows correspond \"actor1\", columns \"actor2\", cells contain dyads' exogenous attributes.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"memory","dir":"Reference","previous_headings":"","what":"Memory","title":"remstats — remstats","text":"default `memory` setting `\"full\"`, implies time point $t$ entire event history $t$ included computation statistics. Alternatively, `memory` set `\"window\"`, past event history within given time window considered (see Mulders & Leenders, 2019). length time window set `memory_value` parameter. example, `memory_value = 100` `memory = \"window\"`, time point $t$ past events happened 100 time units ago included computation statistics. third option set `memory` `\"interval\"`. case, past event history within given time interval considered. example, `\"memory_value\" = c(50, 100)` `memory = \"window\"`, time point $t$ past events happened 50 100 time units ago included computation statistics. Finally, fourth option set `memory` `\"decay\"`. case, weight past event computation statistics depend elapsed time $t$ past event. weight determined based exponential decay function half-life parameter `memory_value` (see Brandes et al., 2009).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"event-weights","dir":"Reference","previous_headings":"","what":"Event weights","title":"remstats — remstats","text":"Note relational event history contains column named “weight”, assumed affect endogenous statistics. affect computation endogenous statistics exceptions follow logically definition (e.g., recenyContinue statistic depend time since event event weights).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"subset-the-event-history-using-start-and-stop-","dir":"Reference","previous_headings":"","what":"Subset the event history using 'start' and 'stop'","title":"remstats — remstats","text":"possible compute statistics segment relational event sequence, based entire event history. done specifying 'start' 'stop' values indices first last event times statistics needed. instance, setting 'start = 5' 'stop = 5' calculates statistics 5th event relational event sequence, considering events 1-4 history. Note cases simultaneous events 'method' set 'pt' (per timepoint), 'start' 'stop' correspond indices first last unique event timepoints statistics needed. example, 'start = 5' 'stop = 5', statistics computed 5th unique timepoint relational event sequence, considering events occurring unique timepoints 1-4.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"adjacency-matrix","dir":"Reference","previous_headings":"","what":"Adjacency matrix","title":"remstats — remstats","text":"Optionally, previously computed adjacency matrix can supplied. Note endogenous statistics computed based adjacency matrix. Hence, supplying previously computed adjacency matrix can reduce computation time user absolutely sure adjacency matrix accurate.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"remstats — remstats","text":"Butts, C. T. (2008). relational event framework social action. Sociological Methodology, 38(1), 155–200. doi:10.1111/j.1467-9531.2008.00203.x , Stadtfeld, C., & Block, P. (2017). Interactions, actors, time: Dynamic network actor models relational events. Sociological Science, 4, 318–352. doi:10.15195/v4.a14","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/remstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remstats — remstats","text":"","code":"library(remstats)  # Tie-oriented model eff <- ~ inertia():send(\"extraversion\") + otp() reh_tie <- remify::remify(edgelist = history, model = \"tie\") remstats(reh = reh_tie, tie_effects = eff, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 5 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: inertia #> \t >> 3: send_extraversion #> \t >> 4: otp #> \t >> 5: inertia:send_extraversion  # Actor-oriented model seff <- ~ send(\"extraversion\") reff <- ~ receive(\"agreeableness\") + inertia() + otp() reh_actor <- remify::remify(edgelist = history, model = \"actor\") remstats(     reh = reh_actor, sender_effects = seff, receiver_effects = reff,     attr_actors = info ) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: send_extraversion #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 3 statistics #> \t >> Statistics: #> \t \t >>> 1: receive_agreeableness #> \t \t >>> 2: inertia #> \t \t >>> 3: otp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankReceive.html","id":null,"dir":"Reference","previous_headings":"","what":"rrankReceive — rrankReceive","title":"rrankReceive — rrankReceive","text":"Specifies statistic recency rank receive effect effects argument tomstats receiver_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankReceive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rrankReceive — rrankReceive","text":"","code":"rrankReceive(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankReceive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rrankReceive — rrankReceive","text":"consider_type logical, indicates whether discriminate event types determining event rank (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankReceive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rrankReceive — rrankReceive","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankReceive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rrankReceive — rrankReceive","text":"rrankSend effect refers rank-based recency effect, described section 2.2.5 Butts (2008). timepoint t, directed dyad (,j) statistic equal inverse rank receiver j among actors sender recently received past events. Note 'rrankReceive' effect defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankReceive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rrankReceive — rrankReceive","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ rrankReceive() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: rrankReceive  reh_actor <- remify::remify(history, model = \"actor\") remstats(receiver_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: rrankReceive"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankSend.html","id":null,"dir":"Reference","previous_headings":"","what":"rrankSend — rrankSend","title":"rrankSend — rrankSend","text":"Specifies statistic recency rank send effect effects argument tomstats receiver_effects argument aomstats.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankSend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rrankSend — rrankSend","text":"","code":"rrankSend(consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankSend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rrankSend — rrankSend","text":"consider_type logical, indicates whether discriminate event types determining event rank (TRUE, default) (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankSend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rrankSend — rrankSend","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankSend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rrankSend — rrankSend","text":"rrankSend effect refers rank-based recency effect, described section 2.2.5 Butts (2008). timepoint t, directed dyad (,j) statistic equal inverse rank receiver j among actors sender recently send past events. Note 'rrankSend' effect defined directed events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/rrankSend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rrankSend — rrankSend","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ rrankSend() remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: rrankSend  reh_actor <- remify::remify(history, model = \"actor\") remstats(receiver_effects = effects, reh = reh_actor) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: rrankSend"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/same.html","id":null,"dir":"Reference","previous_headings":"","what":"same — same","title":"same — same","text":"Specifies statistic \"\" effect tie-oriented model receiver choice step actor-oriented model. \"\" effect refers exogenous actor attribute affects dyad (,j)'s rate interacting (tie-oriented model) actor j's probability chosen receiver event send active sender time t (actor-oriented model) based whether actors j value () attribute.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/same.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"same — same","text":"","code":"same(variable, attr_actors = NULL, attr_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/same.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"same — same","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/same.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"same — same","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/same.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"same — same","text":"statistic timepoint t equal one dyads (,j) value attribute timepoint t (tie-oriented model) one receivers j value attribute active sender timepoint t (actor-oriented model) equal 0 dyads receivers value. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/same.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"same — same","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ same(\"age\") remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: same_age  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: same_age"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/send.html","id":null,"dir":"Reference","previous_headings":"","what":"send — send","title":"send — send","text":"Specifies statistic \"send\" effect tie-oriented model actor activity rate step actor-oriented model. \"send\" effect refers exogenous actor attribute affects actor 's rate sending events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/send.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"send — send","text":"","code":"send(variable, attr_actors = NULL, scaling = c(\"none\", \"std\"), attr_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/send.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"send — send","text":"variable string name column attr_actors object statistic computed. attr_actors optionally, object class data.frame contains attribute, see 'Details.' scaling method scaling statistic. Default scale statistic. Alternatively, standardization statistic per time point can requested \"std\". attr_data Deprecated argument. Please use 'attr_actors' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/send.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"send — send","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/send.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"send — send","text":"statistic timepoint t equal value exogenous attribute actor time t dyads risk set actor sender. Note \"send\" effect defined directed relational events. Construct `attr_actors` object data frame row represents attribute value actor timepoint t: name: actors' name. time: time attribute values change. variable: third column contains attribute used   specification \"difference\" effect. column name correspond   string supplied variable argument `difference()`   function. Note possible omit `attr_actors` object call difference() , instead, supply call remstats() multiple exogenous effects.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/send.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"send — send","text":"","code":"data(history) data(info)  # Tie-oriented model reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ send(\"extraversion\") remstats(reh = reh_tie, tie_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: send_extraversion  # Actor-oriented model reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = effects, attr_actors = info) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: send_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/sp.html","id":null,"dir":"Reference","previous_headings":"","what":"sp — sp","title":"sp — sp","text":"Specifies statistic shared partners effect undirected events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sp — sp","text":"","code":"sp(unique = FALSE, scaling = c(\"none\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sp — sp","text":"unique logical value indicating whether sum minimum events third actors (FALSE, default) number third actors create new, unique shared partner (TRUE). See details information. scaling method scaling triad statistic. Default scale statistic keep raw 'counts'. Alternatively, standardization raw counts per time point can requested 'std'. consider_type logical, indicates whether count shared partners separately event type (TRUE, default) sum across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/sp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sp — sp","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/sp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sp — sp","text":"shared partners effect describes propensity dyads interact based number past shared partners . default, statistic timepoint t undirected dyad (,j) computed sum minimum occurrences past undirected (,h) undirected (j,h) events across actors h. unique parameter set TRUE, different approach taken. case, statistic counts number actors h contribute creation new, distinct shared partner actors j. Additionally, possible specify scaling method using scaling parameter. Please note shared partners effect, 'sp', exclusively defined undirected events.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/sp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sp — sp","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\", directed = FALSE) effects <- ~ sp() remstats(tie_effects = effects, reh = reh_tie) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 45 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: sp"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/spUnique.html","id":null,"dir":"Reference","previous_headings":"","what":"spUnique — spUnique","title":"spUnique — spUnique","text":"Deprecated. Use sp.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/spUnique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spUnique — spUnique","text":"","code":"spUnique()"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/spUnique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spUnique — spUnique","text":"Warning.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/summary.remstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational Event Network Statistics Summaries — summary.remstats","title":"Relational Event Network Statistics Summaries — summary.remstats","text":"Produce summaries statistic remstats object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/summary.remstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational Event Network Statistics Summaries — summary.remstats","text":"","code":"# S3 method for class 'remstats' summary(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/summary.remstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational Event Network Statistics Summaries — summary.remstats","text":"object object class remstats. ... additional arguments affecting summary produced.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/summary.remstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational Event Network Statistics Summaries — summary.remstats","text":"summaries provide information statistic included remstats object, offering insights distribution characteristics data.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/summary.remstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational Event Network Statistics Summaries — summary.remstats","text":"","code":"rehObject <- remify::remify(edgelist = history, model = \"tie\") remstatsObject <- remstats::remstats(reh = rehObject, tie_effects = ~ remstats::inertia()) summary(remstatsObject) #>         baseline   inertia #> Min.           1 0.0000000 #> 1st Qu.        1 0.0000000 #> Median         1 0.0000000 #> Mean           1 0.9839246 #> 3rd Qu.        1 1.5700000 #> Max.           1 6.2700000  rehObject <- remify::remify(edgelist = history, model = \"actor\") remstatsObject <- remstats::remstats(reh = rehObject, receiver_effects = ~ inertia()) summary(remstatsObject) #> $sender_stats #> NULL #>  #> $receiver_stats #>           inertia #> Min.    0.0000000 #> 1st Qu. 0.0000000 #> Median  0.0000000 #> Mean    0.9155304 #> 3rd Qu. 1.4975000 #> Max.    6.2700000 #>"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie.html","id":null,"dir":"Reference","previous_headings":"","what":"tie — tie","title":"tie — tie","text":"Specifies statistic \"tie\" (, \"dyad\") effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tie — tie","text":"","code":"tie(variable, attr_dyads = NULL, scaling = c(\"none\", \"std\"), x, variableName)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tie — tie","text":"variable string specifying attribute compute statistic. attr_dyads data.frame, refers column name attr_actors. attr_dyads matrix, corresponds name exogenous attribute, used label statistic resulting remstats object. attr_dyads data.frame matrix containing attribute information dyads. attr_dyads data.frame, first two columns represent \"actor1\" \"actor2\" (directed events, \"actor1\" corresponds sender, \"actor2\" corresponds receiver). Additional columns can represent dyads' exogenous attributes. attributes vary time, include column named \"time\". attr_dyads matrix, rows correspond \"actor1\", columns \"actor2\", cells contain dyads' exogenous attributes. scaling method scaling statistic. default scaling. Alternatively, standardization statistic per time point can requested \"std\". x Deprecated argument. Please use 'attr_dyads' instead. variableName Deprecated argument. Please use 'variable' instead.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tie — tie","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tie — tie","text":"\"tie\" effect \"dyad\" effect refers exogenous dyad attribute influences dyad (,j)'s interaction rate (tie-oriented models) probability actor j chosen receiver event sent active sender (actor-oriented models). statistic represents value exogenous attribute dyad (,j) attr_dyads data.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tie — tie","text":"","code":"data(history) data(both_male_long) effect <- ~ tie(variable = \"both_male\", attr_dyads = both_male_long) reh <- remify::remify(history, model = \"tie\") remstats(reh = reh, tie_effects = effect) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: tie_both_male  data(both_male_wide) effect <- ~ tie(variable = \"both_male\", attr_dyads = both_male_wide) reh <- remify::remify(history, model = \"tie\") remstats(reh = reh, tie_effects = effect) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: tie_both_male"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"tie_effects — tie_effects","title":"tie_effects — tie_effects","text":"Overview statistics tie-oriented model, see Details.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tie_effects — tie_effects","text":"","code":"tie_effects(directed = NULL, endogenous = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tie_effects — tie_effects","text":"directed logical value. function outputs statistics tie-oriented model directed events true, statistics tie-oriented model undirected events false. endogenous logical value. function outputs endogenous statistics tie-oriented model true, exogenous statistics false","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tie_effects — tie_effects","text":"Returns list available effects corresponding statistics.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tie_effects — tie_effects","text":"Overview statistics tie-oriented model. Baseline: baseline Exogenous statistics: send() receive() tie() () difference() average() minimum() maximum() event() userStat() Endogenous statistics: indegreeSender() indegreeReceiver() outdegreeSender() outdegreeReceiver() totaldegreeSender() totaldegreeReceiver() totaldegreeDyad() degreeMin() degreeMax() degreeDiff() inertia() reciprocity() otp() itp() osp() isp() sp() psABBA() psABBY() psABXA() psABXB() psABXY() psABAY() psABAB() rrankSend() rrankReceive() recencySendSender() recencySendReceiver() recencyReceiveSender() recencyReceiveReceiver() recencyContinue() FEtype()","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tie_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tie_effects — tie_effects","text":"","code":"# List of available effects  tie_effects() #>  [1] \"baseline\"               \"FEtype\"                 \"send\"                   #>  [4] \"receive\"                \"tie\"                    \"same\"                   #>  [7] \"difference\"             \"average\"                \"minimum\"                #> [10] \"maximum\"                \"event\"                  \"inertia\"                #> [13] \"reciprocity\"            \"indegreeSender\"         \"indegreeReceiver\"       #> [16] \"outdegreeSender\"        \"outdegreeReceiver\"      \"totaldegreeSender\"      #> [19] \"totaldegreeReceiver\"    \"totaldegreeDyad\"        \"degreeMin\"              #> [22] \"degreeMax\"              \"degreeDiff\"             \"otp\"                    #> [25] \"itp\"                    \"osp\"                    \"isp\"                    #> [28] \"sp\"                     \"psABBA\"                 \"psABBY\"                 #> [31] \"psABXA\"                 \"psABXB\"                 \"psABXY\"                 #> [34] \"psABAY\"                 \"psABAB\"                 \"rrankSend\"              #> [37] \"rrankReceive\"           \"recencyContinue\"        \"recencySendSender\"      #> [40] \"recencySendReceiver\"    \"recencyReceiveSender\"   \"recencyReceiveReceiver\" #> [43] \"userStat\"                # List of available effects for undirected networks tie_effects(directed = FALSE) #>  [1] \"baseline\"        \"FEtype\"          \"tie\"             \"same\"            #>  [5] \"difference\"      \"average\"         \"minimum\"         \"maximum\"         #>  [9] \"event\"           \"inertia\"         \"totaldegreeDyad\" \"degreeMin\"       #> [13] \"degreeMax\"       \"degreeDiff\"      \"sp\"              \"psABAY\"          #> [17] \"psABAB\"          \"recencyContinue\" \"userStat\"         # List of available endogenous effects for undirected networks tie_effects(directed = FALSE, endogenous = TRUE) #>  [1] \"baseline\"        \"FEtype\"          \"inertia\"         \"totaldegreeDyad\" #>  [5] \"degreeMin\"       \"degreeMax\"       \"degreeDiff\"      \"sp\"              #>  [9] \"psABAY\"          \"psABAB\"          \"recencyContinue\""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":null,"dir":"Reference","previous_headings":"","what":"tomstats — tomstats","title":"tomstats — tomstats","text":"Computes statistics modeling relational event history data tie-oriented relational event model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tomstats — tomstats","text":"","code":"tomstats(   effects,   reh,   attr_actors = NULL,   attr_dyads = NULL,   method = c(\"pt\", \"pe\"),   memory = c(\"full\", \"window\", \"decay\", \"interval\"),   memory_value = NA,   start = 1,   stop = Inf,   display_progress = FALSE,   adjmat = NULL,   get_adjmat = FALSE,   attr_data,   attributes,   edgelist )"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tomstats — tomstats","text":"effects object class \"formula\" (one can coerced class): symbolic description effects model statistics computed, see 'Details' available effects corresponding statistics reh object class \"remify\" characterizing relational event history. attr_actors optionally, object class \"data.frame\" contains exogenous attributes actors (see Details). attr_dyads optionally, object class data.frame matrix containing attribute information dyads (see Details). method Specifies method managing simultaneous events, .e., events occurring time. default 'method' 'pt' (per timepoint), statistics computed unique timepoint edgelist. Alternatively, can choose 'pe' (per event), statistics computed unique event observed edgelist. memory memory used. See `Details'. memory_value Numeric value indicating memory parameter. See `Details'. start optional integer value, specifying index first time event relational event history statistics must computed (see 'Details') stop optional integer value, specifying index last time event relational event history statistics must computed (see 'Details') display_progress progress bar computation endogenous statistics shown (TRUE) (FALSE)? adjmat optionally, previously computed adjacency matrix rows time points columns risk set entries get_adjmat whether adjmat computed tomstats outputted attribute statistics. attr_data deprecated, please use \"attr_actors\" instead attributes deprecated, please use \"attr_data\" instead edgelist deprecated, please use \"reh\" instead","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tomstats — tomstats","text":"object class 'tomstats'. Array computed statistics, rows refer time points, columns refer potential relational event (.e., potential edges) risk set slices refer statistics. 'tomstats' object following attributes: model Type model estimated. formula Model formula, obtained formula inputted 'tie_effects'. riskset risk set used construct statistics. adjmat [Optional], \"get_adjmat = TRUE\", matrix accumulated event weights time point (rows) dyad (columns).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"effects","dir":"Reference","previous_headings":"","what":"Effects","title":"tomstats — tomstats","text":"statistics computed defined symbolically supplied effects argument form ~ effects. terms separated + operators. example: effects = ~ inertia() + otp(). Interactions two effects can included * operators. example: effects = ~ inertia()*otp(). list available effects can obtained tie_effects(). majority statistics can scaled way, see documentation scaling argument separate effect functions information . majority statistics can account event type included dependent variable, see documentation consider_type argument separate effect functions information . Note events relational event history can directed undirected. statistics defined either directed undirected events (see documentation statistics). Note undirected events available tie-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"attr-actors","dir":"Reference","previous_headings":"","what":"attr_actors","title":"tomstats — tomstats","text":"computation exogenous statistics attributes object exogenous covariate information supplied attr_actors argument either remstats() separate effect functions supplied ..._effects arguments (e.g., see send). attr_actors object constructed follows: dataframe rows referring attribute value actor timepoint t. `name` column required contains actor name (corresponding actor names relational event history). `time` column required contains time attributes change (set zero none attributes vary time). Subsequent columns contain attributes called specifications exogenous statistics (column name corresponding string supplied variable argument effect function). Note procedure exogenous effects `tie' `event' deviates , exogenous covariate information specified different way, see tie event.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"attr-dyads","dir":"Reference","previous_headings":"","what":"attr_dyads","title":"tomstats — tomstats","text":"computation dyad exogenous statistics tie(), attributes object exogenous covariates information per dyad supplied. data.frame matrix containing attribute information dyads. attr_dyads data.frame, first two columns represent \"actor1\" \"actor2\" (directed events, \"actor1\" corresponds sender, \"actor2\" corresponds receiver). Additional columns can represent dyads' exogenous attributes. attributes vary time, include column named \"time\". attr_dyads matrix, rows correspond \"actor1\", columns \"actor2\", cells contain dyads' exogenous attributes.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"memory","dir":"Reference","previous_headings":"","what":"Memory","title":"tomstats — tomstats","text":"default `memory` setting `\"full\"`, implies time point $t$ entire event history $t$ included computation statistics. Alternatively, `memory` set `\"window\"`, past event history within given time window considered (see Mulders & Leenders, 2019). length time window set `memory_value` parameter. example, `memory_value = 100` `memory = \"window\"`, time point $t$ past events happened 100 time units ago included computation statistics. third option set `memory` `\"interval\"`. case, past event history within given time interval considered. example, `\"memory_value\" = c(50, 100)` `memory = \"window\"`, time point $t$ past events happened 50 100 time units ago included computation statistics. Finally, fourth option set `memory` `\"decay\"`. case, weight past event computation statistics depend elapsed time $t$ past event. weight determined based exponential decay function half-life parameter `memory_value` (see Brandes et al., 2009).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"event-weights","dir":"Reference","previous_headings":"","what":"Event weights","title":"tomstats — tomstats","text":"Note relational event history contains column named “weight”, assumed affect endogenous statistics. affect computation endogenous statistics exceptions follow logically definition (e.g., recenyContinue statistic depend time since event event weights).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"subset-the-event-history-using-start-and-stop-","dir":"Reference","previous_headings":"","what":"Subset the event history using 'start' and 'stop'","title":"tomstats — tomstats","text":"possible compute statistics segment relational event sequence, based entire event history. done specifying 'start' 'stop' values indices first last event times statistics needed. instance, setting 'start = 5' 'stop = 5' calculates statistics 5th event relational event sequence, considering events 1-4 history. Note cases simultaneous events 'method' set 'pt' (per timepoint), 'start' 'stop' correspond indices first last unique event timepoints statistics needed. example, 'start = 5' 'stop = 5', statistics computed 5th unique timepoint relational event sequence, considering events occurring unique timepoints 1-4.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"adjacency-matrix","dir":"Reference","previous_headings":"","what":"Adjacency matrix","title":"tomstats — tomstats","text":"Optionally, previously computed adjacency matrix can supplied. Note endogenous statistics computed based adjacency matrix. Hence, supplying previously computed adjacency matrix can reduce computation time user absolutely sure adjacency matrix accurate.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"tomstats — tomstats","text":"Butts, C. T. (2008). relational event framework social action. Sociological Methodology, 38(1), 155–200. doi:10.1111/j.1467-9531.2008.00203.x","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/tomstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tomstats — tomstats","text":"","code":"library(remstats)  # Load data data(history) data(info)  # Prepare data reh <- remify::remify(edgelist = history, model = \"tie\")  # Compute effects effects <- ~ inertia():send(\"extraversion\") + otp() tomstats(effects, reh = reh, attr_actors = info) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 5 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: inertia #> \t >> 3: send_extraversion #> \t >> 4: otp #> \t >> 5: inertia:send_extraversion"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeDyad.html","id":null,"dir":"Reference","previous_headings":"","what":"totaldegreeDyad — totaldegreeDyad","title":"totaldegreeDyad — totaldegreeDyad","text":"Specifies statistic 'totaldegreeDyad' effect.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeDyad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"totaldegreeDyad — totaldegreeDyad","text":"","code":"totaldegreeDyad(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeDyad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"totaldegreeDyad — totaldegreeDyad","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts two times number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeDyad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"totaldegreeDyad — totaldegreeDyad","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeDyad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"totaldegreeDyad — totaldegreeDyad","text":"'totaldegreeDyad' effect refers tendency pairs actors (dyads) increase interaction rate total degree (number interactions) actors pair goes . calculate effect specific pair (,j) given timepoint (t), sum degrees two actors dyad (,j). Additionally, optional scaling method, can chosen using 'scaling' method. 'prop' scaling method applied, degree count divided two times total number past events. scaling converts statistic fraction, representing proportion past events least one actor dyad involved. first timepoint, events previously occurred, assumed actor equally likely involved event. case, statistic set 1 divided total number actors (N). totaldegreeDyad effect defined tie-oriented model applicable directed undirected events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeDyad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"totaldegreeDyad — totaldegreeDyad","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ totaldegreeDyad() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: totaldegreeDyad"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeReceiver.html","id":null,"dir":"Reference","previous_headings":"","what":"totaldegreeReceiver — totaldegreeReceiver","title":"totaldegreeReceiver — totaldegreeReceiver","text":"Specifies statistic `totaldegreeReceiver` effect tie-oriented model receiver choice step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeReceiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"totaldegreeReceiver — totaldegreeReceiver","text":"","code":"totaldegreeReceiver(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeReceiver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"totaldegreeReceiver — totaldegreeReceiver","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts two times number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeReceiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"totaldegreeReceiver — totaldegreeReceiver","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeReceiver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"totaldegreeReceiver — totaldegreeReceiver","text":"total degree receiver effect refers tendency actors receive events send received past events. statistic timepoint t dyad (,j) (tie-oriented model) receiver j (actor-oriented model) equal number events send received actor j timepoint t. Note 'totaldegreeReceiver' effect defined directed events. Optionally, scaling method can set scaling. scaling degree count total number past events times two, statistic refers fraction past events times two involved actor j. first time point, events previously occur, assumed every actor equally likely receive message statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeReceiver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"totaldegreeReceiver — totaldegreeReceiver","text":"","code":"reh_tie <- remify::remify(history, model = \"tie\") effects <- ~ totaldegreeReceiver() remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: totaldegreeReceiver  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, receiver_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: empty #> > Receiver model: #> \t >> Dimensions: 115 events x 10 actors x 1 statistics #> \t >> Statistics: #> \t \t >>> 1: totaldegreeReceiver"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeSender.html","id":null,"dir":"Reference","previous_headings":"","what":"totaldegreeSender — totaldegreeSender","title":"totaldegreeSender — totaldegreeSender","text":"Specifies statistic `totaldegreeSender` effect tie-oriented model sender activity rate step actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeSender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"totaldegreeSender — totaldegreeSender","text":"","code":"totaldegreeSender(scaling = c(\"none\", \"prop\", \"std\"), consider_type = TRUE)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeSender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"totaldegreeSender — totaldegreeSender","text":"scaling method scaling degree statistic. Default scale statistic (scaling = \"none\"). Alternatively, scaling raw degree counts two times number past events time t can requested 'prop' standardization raw degree counts per time point can requested 'std'. consider_type logical, indicates whether count degrees separately event type (TRUE, default) sum degrees across different event types (FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeSender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"totaldegreeSender — totaldegreeSender","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeSender.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"totaldegreeSender — totaldegreeSender","text":"total degree sender effect refers tendency actors send events send received past events. statistic timepoint t dyad (,j) (tie-oriented model) sender (actor-oriented model) equal number events send received actor timepoint t. Note 'totaldegreeSender' effect defined directed events. Optionally, scaling method can set scaling. scaling degree count total number past events times two, statistic refers fraction past events times two involved actor . first time point, events previously occur, assumed every actor equally likely send message statistic set equal 1/n, n refers number actors.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/totaldegreeSender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"totaldegreeSender — totaldegreeSender","text":"","code":"effects <- ~ totaldegreeSender() reh_tie <- remify::remify(history, model = \"tie\") remstats(reh = reh_tie, tie_effects = effects) #> Relational Event Network Statistics #> > Model: tie-oriented #> > Computation method: per time point #> > Dimensions: 115 time points x 90 dyads x 2 statistics #> > Statistics: #> \t >> 1: baseline #> \t >> 2: totaldegreeSender  reh_actor <- remify::remify(history, model = \"actor\") remstats(reh = reh_actor, sender_effects = effects) #> Relational Event Network Statistics #> > Model: actor-oriented #> > Computation method: per time point #> > Sender model: #> \t >> Dimensions: 115 time points x 10 actors x 2 statistics #> \t >> Statistics: #> \t \t >>> 1: baseline #> \t \t >>> 2: totaldegreeSender"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/userStat.html","id":null,"dir":"Reference","previous_headings":"","what":"userStat — userStat","title":"userStat — userStat","text":"Allows user add pre-computed statistic statistics object , optionally, interact statistic statistics formula.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/userStat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"userStat — userStat","text":"","code":"userStat(x, variableName = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/userStat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"userStat — userStat","text":"x Matrix number rows equal number events number columns equal number dyads network (tie-oriented model) number actors network (actor-oriented model) variableName Optionally, string name statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/userStat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"userStat — userStat","text":"List information required `remstats::remstats()` compute statistic.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/reference/userStat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"userStat — userStat","text":"","code":"# \\donttest{  reh <- remify::remify(history, model = \"tie\")  actor101Events <- which(history$actor1 == \"101\" | history$actor2 == \"101\")  actor101_stat <- t(sapply(seq_len(nrow(history)), function(i) {    rep(i %in% actor101Events, reh$D)  }))    # Main effects only  effects <- ~ userStat(x = actor101_stat, variableName = \"actor101event\")  remstats(reh = reh, tie_effects = effects) #> Error in eval(y): object 'actor101_stat' not found    # Model with interaction effects  interaction_effects <- ~ inertia() *    userStat(x = actor101_stat, variableName = \"actor101event\")  remstats(reh = reh, tie_effects = interaction_effects) #> Error in eval(y): object 'actor101_stat' not found # }"},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-322","dir":"Changelog","previous_headings":"","what":"remstats 3.2.2","title":"remstats 3.2.2","text":"CRAN release: 2024-05-15 Date: May 14, 2024 New features [Issue [#56]] - ability generate exploratory plot() boxplot() remstats objects. functions designed work large remstats objects taking subset timepoints, dyads actors (depending type plot). user can determine subset taken. Setting subset whole sequence recommended large remstats objects. Added warning consider_type specified event types DV. Added tests plotting functions. Increased test coverage. Fixed Resolved conversion errors occurring using single-letter logical values (.e., ‘T’ TRUE ‘F’ FALSE). Resolved error switch boolean type (tomstats.cpp)","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-321","dir":"Changelog","previous_headings":"","what":"remstats 3.2.1","title":"remstats 3.2.1","text":"CRAN release: 2023-11-29 Date: November 29, 2023 Fixed Fixed [Issue [#78]]: attributes remstats object now correctly set executing bind_remstats(). Resolved bug remstats failed find edgelist reh ordinal. Resolved bug aomstats failed computation method pe, memory method decay first event start index first event time. Resolved Rcpp string warning.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-320","dir":"Changelog","previous_headings":"","what":"remstats 3.2.0","title":"remstats 3.2.0","text":"CRAN release: 2023-11-17 Date: November 16, 2023 Compatible remify version 3.2.0. New features [Issue #67] - Introducing ability manage simultaneous events. events occur time, user can specify method managing simultaneous events. default method \"pt\" (per timepoint), statistics computed unique timepoint edgelist. Alternatively, can choose \"pe\" (per event), statistics computed unique event observed edgelist. [Issue [#57]] - Character / factor variables allowed statistic. subset method object attributes tomstats aomstats objects. Changed meaning start stop values changes slightly method pt. now refer indices first unique timepoint last unique timepoint user wishes calculate statistics. meaning start stop remains unchanged method pe. [Issue #72] - weighting past events, counting now starts time preceding event instead current event. change ensures constant hazard assumption maintained. default value consider_type argument now TRUE improved logical consistency. Added information methods printed remstats object. Fixed Bug formula attributes aomstats object. Removed ccp effect removed.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-318","dir":"Changelog","previous_headings":"","what":"remstats 3.1.8","title":"remstats 3.1.8","text":"Date: October 25, 2023 Works remify >= 3.1.0. Fixed Resolve bug bind_remstats() occurs combining two actor-oriented remstats objects, one receiver effects .","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-317","dir":"Changelog","previous_headings":"","what":"remstats 3.1.7","title":"remstats 3.1.7","text":"Date: October 9, 2023 Works remify >= 3.1.0. New features Flexible data format: Introducing support long-format data tie() statistic. Temporal variability: Introducing support time-varying covariates tie() statistic. Alternative statistic: Presenting dyad() statistic alternative tie() statistic. Major changes Updated function arguments: align introduction long data format (attr_dyads) tie() statistic, previously used attr_data object renamed attr_actors. change ensures consistency clarity terminology.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-316","dir":"Changelog","previous_headings":"","what":"remstats 3.1.6","title":"remstats 3.1.6","text":"Date: October 6, 2023 Works remify >= 3.1.0. New features Collection participation shifts available actor-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-315","dir":"Changelog","previous_headings":"","what":"remstats 3.1.5","title":"remstats 3.1.5","text":"Date: September 5, 2023 Works remify >= 3.1.0. Bug fixes bind_remstats() now works actor-oriented model","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-314","dir":"Changelog","previous_headings":"","what":"remstats 3.1.4","title":"remstats 3.1.4","text":"Date: August 28, 2023 Works remify >= 3.1.0. Bug fixes remstats() now works ordinal event sequences.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-313","dir":"Changelog","previous_headings":"","what":"remstats 3.1.3","title":"remstats 3.1.3","text":"Date: July 13, 2023 Works remify >= 3.1.0. New features display_progress argument tie-oriented model.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-312","dir":"Changelog","previous_headings":"","what":"remstats 3.1.2","title":"remstats 3.1.2","text":"Date: July 6, 2023 Works remify >= 3.1.0. New features unique argument triadic statistics Major changes Naming interaction effects var1.x.var2 var1:var2. spUnique deprecated. Instead sp(unique = TRUE) can used. done consistent new unique argument directed triadic statistics. Minor changes Switch testthat tinytest.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-311","dir":"Changelog","previous_headings":"","what":"remstats 3.1.1","title":"remstats 3.1.1","text":"Date: July 1, 2023 Works remify >= 3.1.0. New features bind_remstats() Compute statistics “active” dyads risk set (combination remify, see remify::remify riskset argument) Major changes attributes argument exists many function renamed attr_data avoid naming conflicts. Change scaling = \".\" option scaling = \"none\". Minor changes efficient computation triadic statistics","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-310","dir":"Changelog","previous_headings":"","what":"remstats 3.1.0","title":"remstats 3.1.0","text":"Date: June 1, 2023 IMPORTANT: remstats 3.1.0 Works remify >= 3.0.0. Make sure remify updated. earlier versions remify use, remstats 3.1.0 break . New features print(), summary() methods. Major changes edgelist argument renamed reh. reh must object class remify. id column attributes object renamed name. aomstats output reduced list statistics (sender_stats receiver_stats) tomstats output reduced array statistics. risk set now attribute. adjmat attribute requested “get_adjmat” (changed save memory). Minor changes Integrated remify v3.0.0 Updated tests.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-303","dir":"Changelog","previous_headings":"","what":"remstats 3.0.3","title":"remstats 3.0.3","text":"Date: March 16, 2023 New features Interval memory. Obtain list available effects functions tie_effects() actor_effects(). Show progress display_progress argument aomstats() (added remstats() tomstats() later.) Minor changes Fixed bug exogenous stats time-varying attributes tie-oriented model. Fixed bug scaling exogenous stats receiver step actor-oriented model. Added explanatory warnings errors. Fixed partial match warning (issue #35). Fixed environment issue attributes object. Renamed “Brandes” memory “decay”. Updated computation degree, inertia, reciprocity triadic statistics actor-oriented model: without adjacency matrix (issue #39).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-302","dir":"Changelog","previous_headings":"","what":"remstats 3.0.2","title":"remstats 3.0.2","text":"Date: February 8, 2023 New features psABAB() effect psABAY() effect adapted undirected events degreeDiff() effect","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-301","dir":"Changelog","previous_headings":"","what":"remstats 3.0.1","title":"remstats 3.0.1","text":"Date: January 5, 2023 New features userStat() effect","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-300","dir":"Changelog","previous_headings":"","what":"remstats 3.0.0","title":"remstats 3.0.0","text":"Date: December 22, 2021 IMPORTANT: remstats 3.0.0 Works remify >= 2.0.0. Make sure remify updated. earlier versions remify use, remstats 3.0.0 break . Major changes Integrated new version (2.0.0) remify. Minor changes Fixed bug tie() (see issue #29). Added warning messages redundant actors present input data exogenous stats (see issue #30).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-204","dir":"Changelog","previous_headings":"","what":"remstats 2.0.4","title":"remstats 2.0.4","text":"Date: December 21, 2021 New features Enabled ARMA_64BIT_WORD","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-203","dir":"Changelog","previous_headings":"","what":"remstats 2.0.3","title":"remstats 2.0.3","text":"Date: December 16, 2021 New features Added degreeMin degreeMax statistics undirected events. Added ccp statistic undirected, dyadic events. Option output statistics (since outputting objects may take lot time). Major changes Updated computation ``Brandes memory’’ adjmat include normalization factor.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-202","dir":"Changelog","previous_headings":"","what":"remstats 2.0.2","title":"remstats 2.0.2","text":"New features Added verbose argument , set TRUE, outputs progress update statistics computation. Added vector types names output object tomstats(). Major changes Changed specification variable event() effect. Minor changes Updated computation procedure triadic rrank statistics tie-oriented model (tomstats) greater efficiency less computation time. Changed way interaction dimnames statistics defined informative. Updated documentation.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-201","dir":"Changelog","previous_headings":"","what":"remstats 2.0.1","title":"remstats 2.0.1","text":"New features Added remstats() function, wrapper aomstats() tomstats(). Added vector actor names output object. Major changes Changed aomstats() function arguments refer requested effects: sender_effects (rateEffects) receiver_effects (choiceEffects). Changed names aomstats() statistics List output object sender_stats (rate) receiver_stats (choice). Fixed bug computation “spUnique” effect (affected event weights). Added variableName tie dimnames statistics object. Fixed bug computation “event” effect combination windowed memory (covariates object sliced). Fixed bug computation “tie” effect (wrong ordering). Minor changes Updated package description. Updated functions documentation.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstats/news/index.html","id":"remstats-200","dir":"Changelog","previous_headings":"","what":"remstats 2.0.0","title":"remstats 2.0.0","text":"Added NEWS.md file track changes package. New features function aomstats() added compute statistics actor-oriented model. Effects rate-step choice-step model specified separately, see function’s documentation README.md. recencyContinue: refers time past since dyad (,j) last interacted. recencyReceiveReceiver: refers time past since receiver j last received event. recencyReceiveSender: refers time past since sender last received event. recencySendReceiver: refers time past since receiver j last sent event. recencySendSender: refers time past since sender last sent event. option Brandes added memory functionality. refers exponential decay weight past events, depending time past since event occurred. memoryValue argument refers halftime parameter (see Brandes et al., 2009). Major changes name function remstats(), main function previous version, changed tomstats() (computes statistics tie-oriented model, opposed function aomstats(), computes statistics actor-oriented model). memory memoryValue added arguments tomstats() aomstats() removed separate statistic functions. based memory settings, adjacency matrix computed. Based adjacency matrix, lot endogenous effects computed. increases efficiency computation, memory effects can longer specified separately per endogenous variable. event weights specified separate weight column edgelist supplied tomstats() aomstats() instead separate argument separate statistic functions. based weights, adjacency matrix computed used computation endogenous effects. (see previous point). Effects requested specified effects argument (tomstats()) rateEffects choiceEffects argument (aomstats()). Previously, argument called formula. actor event types edgelist riskset output tomstats() aomstats() transformed back original ID’s, instead ID’s used remify::reh() internally, user can easily assess computed statistics. intercept specified manner lm(). tie-oriented model rate step actor-oriented model, intercept term assumed default (unless ordinal argument set TRUE). Alternatively, can explicitly specified adding 1 terms effects formula explicitly removed adding -1 terms. baseline() specification removed. exogenous statistic equate() removed, something similar can achieved tie(). Fixed effects event type can now specified FEtype() (previously done baseline(with_type = TRUE)). argument with_type endogenous statistic functions renamed consider_type. Previously, two variables specified one exogenous effect formula. functionality removed, one variable per exogenous effect formula can specified. Minor changes attributes object (previously named covariates) can now supplied main functions tomstats() aomstats() directly, can also still specified separate functions exogenous statistics. increase efficiency, computation statistics based adjacency matrix either first computed internally can supplied user. user won’t notice much , except adjacency matrix (computed) also outputted can inputted decrease computation time extra statistic requested.","code":""}]
